var tipuesearch = {"pages":[{"title":" miniFAVOR ","text":"miniFAVOR miniFAVOR Documentation Organization Top Navigation Bar Getting Help miniFAVOR Documentation Welcome to the miniFAVOR documentation.\nThis online documentation is automatically generated from inline comments and static analysis using the FORD tool. Organization The FORD tool is used to document Modern Fortran source code. Top Navigation Bar You can navigate through the source code by using the black navigation bar at the top of this landing page. In addition, the search box on the right side of the top navbar, the following link is available: Source Files :\n  This landing page enumerates the source files associated with the project,\n  includes a graph depicting their interdependencies and links to their dedicated pages. Getting Help If you encounter a problem, have a suggestion, or want to ask a question,\nwe encourage you to post an issue in this projects Github repository by opening a new issue .","tags":"home","loc":"index.html"},{"title":"miniFAVOR.f90 – miniFAVOR","text":"PROGRAM: miniFAVOR PURPOSE:  Entry point for the console application. This file depends on sourcefile~~minifavor.f90~~EfferentGraph sourcefile~minifavor.f90 miniFAVOR.f90 sourcefile~input_data_m.f90 input_data_m.f90 sourcefile~minifavor.f90->sourcefile~input_data_m.f90 sourcefile~calc_k.f90 Calc_K.f90 sourcefile~minifavor.f90->sourcefile~calc_k.f90 sourcefile~random_samples_m.f90 random_samples_m.f90 sourcefile~minifavor.f90->sourcefile~random_samples_m.f90 sourcefile~calc_rtndt.f90 Calc_RTndt.f90 sourcefile~minifavor.f90->sourcefile~calc_rtndt.f90 sourcefile~detailed_output_m.f90 detailed_output_m.f90 sourcefile~minifavor.f90->sourcefile~detailed_output_m.f90 sourcefile~calc_cpi.f90 Calc_cpi.f90 sourcefile~minifavor.f90->sourcefile~calc_cpi.f90 sourcefile~output_data_m.f90 output_data_m.f90 sourcefile~minifavor.f90->sourcefile~output_data_m.f90 sourcefile~commons.f90 Commons.f90 sourcefile~calc_k.f90->sourcefile~commons.f90 sourcefile~material_content_m.f90 material_content_m.f90 sourcefile~calc_rtndt.f90->sourcefile~material_content_m.f90 sourcefile~calc_rtndt.f90->sourcefile~commons.f90 sourcefile~detailed_output_m.f90->sourcefile~output_data_m.f90 sourcefile~output_data_m.f90->sourcefile~input_data_m.f90 sourcefile~output_data_m.f90->sourcefile~random_samples_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Programs minifavor Source Code miniFAVOR.f90 Source Code !  miniFAVOR.f90 ! !  FUNCTIONS: !  miniFAVOR - Entry point of console application. ! !**************************************************************************** ! !  PROGRAM: miniFAVOR ! !  PURPOSE:  Entry point for the console application. ! !**************************************************************************** program miniFAVOR use assertions_interface , only : assert use calc_RTndt , only : RTndt , CF use calc_K , only : Ki_t use calc_cpi , only : cpi_t use random_samples_m , only : random_samples_t use input_data_m , only : input_data_t use output_data_m , only : output_data_t use detailed_output_m , only : detailed_output_t use iso_fortran_env , only : input_unit implicit none ! Variables character ( len = 64 ) :: fn_IN integer , parameter :: input_unit_reader = 1 , output_writer = 1 integer :: i type ( random_samples_t ), allocatable :: samples (:) type ( input_data_t ) input_data ! Body of miniFAVOR associate ( me => this_image ()) !Get input file name if ( me == input_unit_reader ) then print * , 'Input file name:' read ( input_unit , '(a)' ) fn_IN !Read input file call input_data % define ( fn_IN ) end if call input_data % broadcast ( source_image = input_unit_reader ) !Calculate applied stress intensity factor (SIF) associate ( nsim => input_data % nsim ()) call assert ( nsim > 0 , \"main: nsim>0\" , nsim ) allocate ( samples ( nsim )) do i = 1 , nsim ! This cannot be parallelized or reordered without the results changing call samples ( i )% define () end do associate ( & output_data => output_data_t ( input_data , samples ), & base_name => fn_IN ( 1 : index ( fn_IN , '.in' ) - 1 ) & ) if ( me == output_writer ) then block integer unit open ( newunit = unit , file = base_name // \".out\" , status = 'unknown' ) write ( unit , '(DT)' ) output_data close ( unit ) if ( input_data % details ()) then open ( newunit = unit , file = base_name // \".dat\" , status = 'unknown' ) write ( unit , '(DT)' ) detailed_output_t ( output_data ) close ( unit ) end if end block end if end associate end associate end associate end program miniFAVOR","tags":"","loc":"sourcefile/minifavor.f90.html"},{"title":"random_samples_s.f90 – miniFAVOR","text":"This file depends on sourcefile~~random_samples_s.f90~~EfferentGraph sourcefile~random_samples_s.f90 random_samples_s.f90 sourcefile~random_samples_m.f90 random_samples_m.f90 sourcefile~random_samples_s.f90->sourcefile~random_samples_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules random_samples_s Source Code random_samples_s.f90 Source Code submodule ( random_samples_m ) random_samples_s use assertions_interface , only : assert implicit none contains module procedure define logical , save :: first_call = . true . if ( first_call ) then first_call = . false . block integer i , num_seeds call random_seed ( size = num_seeds ) call random_seed ( put = [( i , i = 1 , num_seeds )]) end block end if ! These must be called in this order or the results will change call random_number ( self % Cu_sig_local_ ) call random_number ( self % Cu_local_ ) call random_number ( self % Ni_local_ ) call random_number ( self % phi_ ) call self % mark_as_defined end procedure module procedure write_formatted integer , parameter :: success = 0 select case ( iotype ) case ( 'LISTDIRECTED' ) write ( unit , * ) \"random_samples_t(Cu_sig_local=\" , self % Cu_sig_local_ , \", Cu_local=\" , self % Cu_local_ , & \", Ni_local=\" , self % Ni_local_ , \", phi=\" , self % phi_ , \")\" iostat = success case default block use iso_fortran_env , only : IOSTAT_INQUIRE_INTERNAL_UNIT integer , parameter :: iotype_not_supported = 99 call assert ( iotype_not_supported /= IOSTAT_INQUIRE_INTERNAL_UNIT , \"standard-conforming iostat_value\" ) iostat = iotype_not_supported iomsg = \"iotype not supported\" end block end select end procedure module procedure Cu_sig_local self_Cu_sig_local = self % Cu_sig_local_ end procedure module procedure Cu_local self_Cu_local = self % Cu_local_ end procedure module procedure Ni_local self_Ni_local = self % Ni_local_ end procedure module procedure phi self_phi = self % phi_ end procedure end submodule","tags":"","loc":"sourcefile/random_samples_s.f90.html"},{"title":"material_content_m.f90 – miniFAVOR","text":"Files dependent on this one sourcefile~~material_content_m.f90~~AfferentGraph sourcefile~material_content_m.f90 material_content_m.f90 sourcefile~calc_rtndt.f90 Calc_RTndt.f90 sourcefile~calc_rtndt.f90->sourcefile~material_content_m.f90 sourcefile~material_content_s.f90 material_content_s.f90 sourcefile~material_content_s.f90->sourcefile~material_content_m.f90 sourcefile~output_data_s.f90 output_data_s.f90 sourcefile~output_data_s.f90->sourcefile~material_content_m.f90 sourcefile~output_data_s.f90->sourcefile~calc_rtndt.f90 sourcefile~minifavor.f90 miniFAVOR.f90 sourcefile~minifavor.f90->sourcefile~calc_rtndt.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules material_content_m Source Code material_content_m.f90 Source Code module material_content_m use data_partition_interface , only : data_partition_t implicit none private public :: material_content_t public :: gather type material_content_t !! Elemental content private real Cu_ !! copper real Ni_ !! nickel contains procedure :: Cu procedure :: Ni end type interface material_content_t elemental module function sample_chem ( Cu_ave , Ni_ave , Cu_sig , Ni_sig , samples ) result ( material_content ) ! Contstruct a new material_content_t by sampling the copper and nickel contents based on ! the nominal value and the standard deviation use random_samples_m , only : random_samples_t implicit none type ( material_content_t ) material_content real , intent ( in ) :: Cu_ave , Ni_ave , Cu_sig , Ni_sig type ( random_samples_t ), intent ( in ) :: samples end function end interface interface module subroutine write_formatted ( self , unit , iotype , v_list , iostat , iomsg ) implicit none class ( material_content_t ), intent ( in ) :: self integer , intent ( in ) :: unit character ( * ), intent ( in ) :: iotype integer , intent ( in ) :: v_list (:) integer , intent ( out ) :: iostat character ( * ), intent ( inout ) :: iomsg end subroutine elemental module function Cu ( self ) result ( my_Cu ) implicit none class ( material_content_t ), intent ( in ) :: self real my_Cu end function elemental module function Ni ( self ) result ( my_Ni ) implicit none class ( material_content_t ), intent ( in ) :: self real my_Ni end function module subroutine gather ( material_content , data_partition , dim ) implicit none type ( material_content_t ), intent ( inout ) :: material_content (:) type ( data_partition_t ), intent ( in ) :: data_partition integer , optional :: dim end subroutine end interface end module","tags":"","loc":"sourcefile/material_content_m.f90.html"},{"title":"Commons.f90 – miniFAVOR","text":"Files dependent on this one sourcefile~~commons.f90~~AfferentGraph sourcefile~commons.f90 Commons.f90 sourcefile~calc_rtndt.f90 Calc_RTndt.f90 sourcefile~calc_rtndt.f90->sourcefile~commons.f90 sourcefile~calc_k.f90 Calc_K.f90 sourcefile~calc_k.f90->sourcefile~commons.f90 sourcefile~minifavor.f90 miniFAVOR.f90 sourcefile~minifavor.f90->sourcefile~calc_rtndt.f90 sourcefile~minifavor.f90->sourcefile~calc_k.f90 sourcefile~output_data_s.f90 output_data_s.f90 sourcefile~output_data_s.f90->sourcefile~calc_rtndt.f90 sourcefile~output_data_s.f90->sourcefile~calc_k.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules constants_h Source Code Commons.f90 Source Code module constants_h implicit none real , parameter :: Pi = 4.D0 * DATAN ( 1.D0 ) real , dimension ( 0 : 40 , 7 ), parameter :: CF_weld = reshape (( / & 20 , 20 , 21 , 22 , 24 , 26 , 29 , 32 , 36 , 40 , & 44 , 49 , 52 , 58 , 61 , 66 , 70 , 75 , 79 , 83 , & 88 , 92 , 97 , 101 , 105 , 110 , 113 , 119 , 122 , 128 , & 131 , 136 , 140 , 144 , 149 , 153 , 158 , 162 , 166 , 171 , & 175 , & 20 , 20 , 26 , 35 , 43 , 49 , 52 , 55 , 58 , 61 , & 65 , 68 , 72 , 76 , 79 , 84 , 88 , 92 , 95 , 100 , & 104 , 108 , 112 , 117 , 121 , 126 , 130 , 134 , 138 , 142 , & 146 , 151 , 155 , 160 , 164 , 168 , 172 , 177 , 182 , 185 , & 189 , & 20 , 20 , 27 , 41 , 54 , 67 , 77 , 85 , 90 , 94 , & 97 , 101 , 103 , 106 , 109 , 112 , 115 , 119 , 122 , 126 , & 129 , 133 , 137 , 140 , 144 , 148 , 151 , 155 , 160 , 164 , & 167 , 172 , 175 , 180 , 184 , 187 , 191 , 196 , 200 , 203 , & 207 , & 20 , 20 , 27 , 41 , 54 , 68 , 82 , 95 , 106 , 115 , & 122 , 130 , 135 , 139 , 142 , 146 , 149 , 151 , 154 , 157 , & 160 , 164 , 167 , 169 , 173 , 176 , 180 , 184 , 187 , 191 , & 194 , 198 , 202 , 205 , 209 , 212 , 216 , 220 , 223 , 227 , & 231 , & 20 , 20 , 27 , 41 , 54 , 68 , 82 , 95 , 108 , 122 , & 133 , 144 , 153 , 162 , 168 , 175 , 178 , 184 , 187 , 191 , & 194 , 197 , 200 , 203 , 206 , 209 , 212 , 216 , 218 , 222 , & 225 , 228 , 231 , 234 , 238 , 241 , 245 , 248 , 250 , 254 , & 257 , & 20 , 20 , 27 , 41 , 54 , 68 , 82 , 95 , 108 , 122 , & 135 , 148 , 161 , 172 , 182 , 191 , 199 , 207 , 214 , 220 , & 223 , 229 , 232 , 236 , 239 , 243 , 246 , 249 , 251 , 254 , & 257 , 260 , 263 , 266 , 269 , 272 , 275 , 278 , 281 , 285 , & 288 , & 20 , 20 , 27 , 41 , 54 , 68 , 82 , 95 , 108 , 122 , & 135 , 148 , 161 , 176 , 188 , 200 , 211 , 221 , 230 , 238 , & 245 , 252 , 257 , 263 , 268 , 272 , 276 , 280 , 284 , 287 , & 290 , 293 , 296 , 299 , 302 , 305 , 308 , 311 , 314 , 317 , & 320 / ), [ 41 , 7 ]) end module constants_h","tags":"","loc":"sourcefile/commons.f90.html"},{"title":"input_data_s.F90 – miniFAVOR","text":"This file depends on sourcefile~~input_data_s.f90~~EfferentGraph sourcefile~input_data_s.f90 input_data_s.F90 sourcefile~input_data_m.f90 input_data_m.f90 sourcefile~input_data_s.f90->sourcefile~input_data_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules input_data_s Source Code input_data_s.F90 Source Code submodule ( input_data_m ) input_data_s implicit none contains module procedure define character ( len = 64 ) :: fn_ECHO integer :: i , n_IN , n_ECHO !Open input file and create echo file open ( newunit = n_IN , file = fn_IN , status = 'old' , form = 'formatted' ) fn_ECHO = fn_IN ( 1 : index ( fn_IN , '.in' ) - 1 ) // '.echo' open ( newunit = n_ECHO , file = fn_ECHO , status = 'unknown' , form = 'formatted' ) !Read and echo crack depth and vessel thickness read ( n_IN , * ) self % a_ , self % b_ write ( n_ECHO , '(a25,f10.3,a)' ) 'Crack Depth: ' , self % a (), ' in' write ( n_ECHO , '(a25,f10.3,a)' ) 'Vessel Thickness: ' , self % b (), ' in' !Read and echo number of simulations to be performed andnumber of time steps read ( n_IN , * ) self % nsim_ , self % ntime_ write ( n_ECHO , '(a25,i10)' ) 'Number of Simulations: ' , self % nsim () write ( n_ECHO , '(a25,i10)' ) 'Number of Time Steps: ' , self % ntime () !Read in and echo type of output to be written read ( n_IN , * ) self % details_ write ( n_ECHO , '(a25,l10)' ) 'Detailed output: ' , self % details () !Read and echo embrittlement inputs read ( n_IN , * ) self % Cu_ave_ , self % Ni_ave_ , self % Cu_sig_ , self % Ni_sig_ , self % fsurf_ , self % RTndt0_ write ( n_ECHO , '(a25,f10.3,a)' ) 'Copper Content: ' , self % Cu_ave (), ' %' write ( n_ECHO , '(a25,f10.3,a)' ) 'Nickel Content: ' , self % Ni_ave (), ' %' write ( n_ECHO , '(a25,f10.3,a)' ) 'Copper Content STDEV: ' , self % Cu_sig (), ' %' write ( n_ECHO , '(a25,f10.3,a)' ) 'Nickel Content STDEV: ' , self % Ni_sig (), ' %' write ( n_ECHO , '(a25,f10.3,a)' ) 'ID Surface Fluence: ' , self % fsurf (), ' n/cm&#94;2' write ( n_ECHO , '(a25,f10.3,a)' ) 'Unirradiated RTndt: ' , self % RTndt0 (), ' degF' !Allocate stress and temperature arrays allocate ( self % stress_ ( self % ntime ())) allocate ( self % temp_ ( self % ntime ())) !Read and echo stress and temerature inputs write ( n_ECHO , '(a)' ) 'Stress (ksi),      Temperature (degF)' read_transient : do i = 1 , self % ntime () read ( n_IN , * ) self % stress_ ( i ), self % temp_ ( i ) write ( n_ECHO , '(f10.3,9x,f10.3)' ) self % stress_ ( i ), self % temp_ ( i ) end do read_transient end procedure define module procedure default_input_data_t new_input_data_t % a_ = 0. new_input_data_t % b_ = 0. new_input_data_t % Cu_ave_ = 0. new_input_data_t % Ni_ave_ = 0. new_input_data_t % Cu_sig_ = 0. new_input_data_t % Ni_sig_ = 0. new_input_data_t % fsurf_ = 0. new_input_data_t % RTndt0_ = 0. new_input_data_t % stress_ = [ 0. ] new_input_data_t % temp_ = [ 0. ] new_input_data_t % nsim_ = 0 new_input_data_t % ntime_ = 0 new_input_data_t % details_ = . true . end procedure module procedure assign lhs % a_ = rhs % a_ lhs % b_ = rhs % b_ lhs % Cu_ave_ = rhs % Cu_ave_ lhs % Ni_ave_ = rhs % Ni_ave_ lhs % Cu_sig_ = rhs % Cu_sig_ lhs % Ni_sig_ = rhs % Ni_sig_ lhs % fsurf_ = rhs % fsurf_ lhs % RTndt0_ = rhs % RTndt0_ lhs % stress_ = rhs % stress_ lhs % temp_ = rhs % temp_ lhs % nsim_ = rhs % nsim_ lhs % ntime_ = rhs % ntime_ lhs % details_ = rhs % details_ end procedure module procedure norm norm_of_self = maxval ( abs ([ & self % a_ , self % b_ , self % Cu_ave_ , self % Ni_ave_ , self % Cu_sig_ , self % Ni_sig_ , self % fsurf_ , self % RTndt0_ , self % stress_ , & self % temp_ , real ( self % nsim_ ), real ( self % ntime_ ), merge ( 0. , huge ( 0. ), self % details_ ) & ])) end procedure module procedure subtract difference % a_ = self % a_ - rhs % a_ difference % b_ = self % b_ - rhs % b_ difference % Cu_ave_ = self % Cu_ave_ - rhs % Cu_ave_ difference % Ni_ave_ = self % Ni_ave_ - rhs % Ni_ave_ difference % Cu_sig_ = self % Cu_sig_ - rhs % Cu_sig_ difference % Ni_sig_ = self % Ni_sig_ - rhs % Ni_sig_ difference % fsurf_ = self % fsurf_ - rhs % fsurf_ difference % RTndt0_ = self % RTndt0_ - rhs % RTndt0_ difference % stress_ = self % stress_ - rhs % stress_ difference % temp_ = self % temp_ - rhs % temp_ difference % nsim_ = self % nsim_ - rhs % nsim_ difference % ntime_ = self % ntime_ - rhs % ntime_ difference % details_ = self % details_ . eqv . rhs % details_ end procedure module procedure broadcast integer size_stress , size_temp associate ( me => this_image ()) if ( me == source_image ) then size_stress = size ( self % stress_ ) size_temp = size ( self % temp_ ) end if call co_broadcast ( size_stress , source_image ) call co_broadcast ( size_temp , source_image ) if ( me /= source_image ) then allocate ( self % stress_ ( size_stress )) allocate ( self % temp_ ( size_temp )) end if end associate workarounds : & block logical , parameter :: opencoarrays_issue_727_fixed = . false . if (. not . opencoarrays_issue_727_fixed ) then ! work around OpenCoarrays issue 727 (https://github.com/sourceryinstitute/OpenCoarrays/issues/727) call broadcast_components else select type ( self ) ! work around gfortran lack of support for polymorphic co_broadcast argument type is ( input_data_t ) call co_broadcast ( self , source_image ) class default error stop \"input_data_type_t%broadcast: unsupported type\" end select end if end block workarounds #ifdef FORD end procedure #else contains #endif subroutine broadcast_components () call co_broadcast ( self % a_ , source_image ) call co_broadcast ( self % b_ , source_image ) call co_broadcast ( self % Cu_ave_ , source_image ) call co_broadcast ( self % Ni_ave_ , source_image ) call co_broadcast ( self % Cu_sig_ , source_image ) call co_broadcast ( self % Ni_sig_ , source_image ) call co_broadcast ( self % fsurf_ , source_image ) call co_broadcast ( self % RTndt0_ , source_image ) call co_broadcast ( self % stress_ , source_image ) call co_broadcast ( self % temp_ , source_image ) call co_broadcast ( self % nsim_ , source_image ) call co_broadcast ( self % ntime_ , source_image ) call co_broadcast ( self % details_ , source_image ) end subroutine #ifndef FORD end procedure #endif module procedure a self_a = self % a_ end procedure module procedure b self_b = self % b_ end procedure module procedure nsim self_nsim = self % nsim_ end procedure module procedure ntime self_ntime = self % ntime_ end procedure module procedure details self_details = self % details_ end procedure module procedure Cu_ave self_Cu_ave = self % Cu_ave_ end procedure module procedure Cu_sig self_Cu_sig = self % Cu_sig_ end procedure module procedure Ni_ave self_Ni_ave = self % Ni_ave_ end procedure module procedure Ni_sig self_Ni_sig = self % Ni_sig_ end procedure module procedure fsurf self_fsurf = self % fsurf_ end procedure module procedure RTndt0 self_RTndt0 = self % RTndt0_ end procedure module procedure stress self_stress = self % stress_ end procedure module procedure temp self_temp = self % temp_ end procedure end submodule input_data_s","tags":"","loc":"sourcefile/input_data_s.f90.html"},{"title":"Calc_RTndt.f90 – miniFAVOR","text":"This file depends on sourcefile~~calc_rtndt.f90~~EfferentGraph sourcefile~calc_rtndt.f90 Calc_RTndt.f90 sourcefile~material_content_m.f90 material_content_m.f90 sourcefile~calc_rtndt.f90->sourcefile~material_content_m.f90 sourcefile~commons.f90 Commons.f90 sourcefile~calc_rtndt.f90->sourcefile~commons.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~calc_rtndt.f90~~AfferentGraph sourcefile~calc_rtndt.f90 Calc_RTndt.f90 sourcefile~minifavor.f90 miniFAVOR.f90 sourcefile~minifavor.f90->sourcefile~calc_rtndt.f90 sourcefile~output_data_s.f90 output_data_s.f90 sourcefile~output_data_s.f90->sourcefile~calc_rtndt.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules calc_rtndt Source Code Calc_RTndt.f90 Source Code module calc_RTndt use assertions_interface , only : assert use material_content_m , only : material_content_t implicit none contains elemental function RTndt ( a , CF , fsurf , RTndt0 , phi ) real :: RTndt real , intent ( in ) :: a , CF , fsurf , RTndt0 , phi associate ( & D_RTepi => - 2 9.5 + 7 8.0 * ( - log ( 1 - phi )) ** ( 1 / 1.73 ), & f => fsurf * exp ( - 0.24 * a ) & ) associate ( D_RTndt => CF * f ** ( 0.28 - 0.10 * log10 ( f ))) RTndt = RTndt0 + D_RTepi + D_RTndt end associate end associate end function RTndt !This function calculates the weld chemistry factor given the copper and nickel contents elemental function CF ( Cu , Ni ) use constants_h , only : CF_weld real :: CF real , intent ( in ) :: Cu , Ni truncate_and_interpolate : & associate ( & Cu_int => rounded_and_bounded ( Cu * 100 , bounds = [ 0 , 40 ]), & Ni_int => int ( rounded_and_bounded ( Ni * 100 , bounds = [ 0 , 120 ]) / 20 ) + 1 & ! Nickel contents in CF_weld are at intervals of 0.20% ) !Bi-linear interpolation if ( Cu <= 0.0 . or . Cu >= 0.40 ) then !only interpolate on nickel select case ( Ni_int ) case ( 7 ) CF = CF_weld ( Cu_int , Ni_int ) case default CF = CF_weld ( Cu_int , Ni_int ) + & ( Ni - 0.2 * ( Ni_int - 1 )) / 0.2 * ( CF_weld ( Cu_int , Ni_int + 1 ) - CF_weld ( Cu_int , Ni_int )) end select else !First, interpolate on copper select case ( Ni_int ) case ( 7 ) CF = CF_weld ( Cu_int , Ni_int ) + & ( Cu - 0.01 * ( Cu_int )) / 0.01 * ( CF_weld ( Cu_int + 1 , Ni_int ) - CF_weld ( Cu_int + 1 , Ni_int )) case default associate ( & CF_1 => CF_weld ( Cu_int , Ni_int ) + ( Cu - 0.01 * ( Cu_int )) / 0.01 * ( CF_weld ( Cu_int + 1 , Ni_int ) - CF_weld ( Cu_int + 1 , Ni_int )), & CF_2 => CF_weld ( Cu_int , Ni_int + 1 ) + ( Cu - 0.01 * ( Cu_int )) / 0.01 * ( CF_weld ( Cu_int + 1 , Ni_int + 1 ) - CF_weld ( Cu_int + 1 , Ni_int + 1 )) & ) !Second, interpolate on nickel CF = CF_1 + ( Ni - 0.2 * ( Ni_int - 1 )) / 0.2 * ( CF_2 - CF_1 ) end associate end select end if end associate truncate_and_interpolate contains pure function rounded_and_bounded ( unbounded_value , bounds ) integer rounded_and_bounded real , intent ( in ) :: unbounded_value integer , intent ( in ) :: bounds (:) integer , parameter :: end_points = 2 call assert ( size ( bounds ) == end_points , \"Calc_RTndt|bounded_value: size(bounds)==end_points\" ) associate ( floor_ => bounds ( 1 ), ceiling_ => bounds ( 2 )) if ( unbounded_value < floor_ ) then rounded_and_bounded = floor_ else if ( unbounded_value > ceiling_ ) then rounded_and_bounded = ceiling_ else rounded_and_bounded = int ( unbounded_value ) end if end associate end function end function CF end module calc_RTndt","tags":"","loc":"sourcefile/calc_rtndt.f90.html"},{"title":"detailed_output_m.f90 – miniFAVOR","text":"This file depends on sourcefile~~detailed_output_m.f90~~EfferentGraph sourcefile~detailed_output_m.f90 detailed_output_m.f90 sourcefile~output_data_m.f90 output_data_m.f90 sourcefile~detailed_output_m.f90->sourcefile~output_data_m.f90 sourcefile~random_samples_m.f90 random_samples_m.f90 sourcefile~output_data_m.f90->sourcefile~random_samples_m.f90 sourcefile~input_data_m.f90 input_data_m.f90 sourcefile~output_data_m.f90->sourcefile~input_data_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~detailed_output_m.f90~~AfferentGraph sourcefile~detailed_output_m.f90 detailed_output_m.f90 sourcefile~detailed_output_s.f90 detailed_output_s.f90 sourcefile~detailed_output_s.f90->sourcefile~detailed_output_m.f90 sourcefile~minifavor.f90 miniFAVOR.f90 sourcefile~minifavor.f90->sourcefile~detailed_output_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules detailed_output_m Source Code detailed_output_m.f90 Source Code module detailed_output_m use output_data_m , only : output_data_t implicit none private type , public , extends ( output_data_t ) :: detailed_output_t contains procedure :: write_formatted end type interface detailed_output_t module function new_detailed_output ( output_data ) type ( output_data_t ), intent ( in ) :: output_data type ( detailed_output_t ) new_detailed_output end function end interface interface module subroutine write_formatted ( self , unit , iotype , v_list , iostat , iomsg ) implicit none class ( detailed_output_t ), intent ( in ) :: self integer , intent ( in ) :: unit character ( * ), intent ( in ) :: iotype integer , intent ( in ) :: v_list (:) integer , intent ( out ) :: iostat character ( * ), intent ( inout ) :: iomsg end subroutine end interface end module detailed_output_m","tags":"","loc":"sourcefile/detailed_output_m.f90.html"},{"title":"material_content_s.f90 – miniFAVOR","text":"This file depends on sourcefile~~material_content_s.f90~~EfferentGraph sourcefile~material_content_s.f90 material_content_s.f90 sourcefile~material_content_m.f90 material_content_m.f90 sourcefile~material_content_s.f90->sourcefile~material_content_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules material_content_s Source Code material_content_s.f90 Source Code submodule ( material_content_m ) material_content_s use assertions_interface , only : assert implicit none contains module procedure write_formatted integer , parameter :: success = 0 select case ( iotype ) case ( 'LISTDIRECTED' ) write ( unit , * ) \"material_local_t(Cu_=\" , self % Cu_ , \", Ni_=\" , self % Ni_ , \")\" iostat = success case default block use iso_fortran_env , only : IOSTAT_INQUIRE_INTERNAL_UNIT integer , parameter :: iotype_not_supported = 99 call assert ( iotype_not_supported /= IOSTAT_INQUIRE_INTERNAL_UNIT , \"standard-conforming iostat_value\" ) iostat = iotype_not_supported iomsg = \"iotype not supported\" end block end select end procedure module procedure Cu my_Cu = self % Cu_ end procedure module procedure Ni my_Ni = self % Ni_ end procedure module procedure sample_chem call assert ( samples % user_defined (), \"material_content_s|sample_chem: samples%user_defined()\" ) associate ( & Cu_bar => Cu_ave * Cu_sig , & Cu_sig_star => min ( 0.0718 * Cu_ave , 0.0185 ) & ) associate ( Cu_sig_local => Cu_bar + Cu_sig_star * sqrt ( 2.0 ) * erfc ( 2 * samples % Cu_sig_local () - 1 )) !Sample local copper content based on weld copper sampling procedure !Sample local nickel content based on weld nickel heat 34B009 & W5214 procedure associate ( & Cu_local => Cu_ave + Cu_sig_local * sqrt ( 2.0 ) * erfc ( 2 * samples % Cu_local () - 1 ), & Ni_local => Ni_ave + Ni_sig * sqrt ( 2.0 ) * erfc ( 2 * samples % Ni_local () - 1 ) & ) material_content = material_content_t ( Cu_ = Cu_local , Ni_ = Ni_local ) end associate end associate end associate end procedure module procedure gather real , allocatable , dimension (:) :: Cu_local , Ni_local allocate ( Cu_local ( size ( material_content )), Ni_local ( size ( material_content ))) associate ( me => this_image ()) associate ( my_first => data_partition % first ( me ), my_last => data_partition % last ( me )) Cu_local ( my_first : my_last ) = material_content ( my_first : my_last )% Cu () Ni_local ( my_first : my_last ) = material_content ( my_first : my_last )% Ni () end associate end associate call data_partition % gather ( Cu_local , dim = 1 ) call data_partition % gather ( Ni_local , dim = 1 ) material_content % Cu_ = Cu_local material_content % Ni_ = Ni_local end procedure end submodule","tags":"","loc":"sourcefile/material_content_s.f90.html"},{"title":"detailed_output_s.f90 – miniFAVOR","text":"This file depends on sourcefile~~detailed_output_s.f90~~EfferentGraph sourcefile~detailed_output_s.f90 detailed_output_s.f90 sourcefile~detailed_output_m.f90 detailed_output_m.f90 sourcefile~detailed_output_s.f90->sourcefile~detailed_output_m.f90 sourcefile~output_data_m.f90 output_data_m.f90 sourcefile~detailed_output_m.f90->sourcefile~output_data_m.f90 sourcefile~random_samples_m.f90 random_samples_m.f90 sourcefile~output_data_m.f90->sourcefile~random_samples_m.f90 sourcefile~input_data_m.f90 input_data_m.f90 sourcefile~output_data_m.f90->sourcefile~input_data_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules detailed_output_s Source Code detailed_output_s.f90 Source Code submodule ( detailed_output_m ) detailed_output_s implicit none contains module procedure new_detailed_output new_detailed_output % output_data_t = output_data end procedure module procedure write_formatted integer i associate ( nsim => self % nsim ()) write ( unit , '(2a)' ) 'MiniFAVOR Detailed Output' , new_line ( 'a' ) write ( unit , '(2a)' ) '/Applied SIF (ksi*in&#94;0.5)/' , new_line ( 'a' ) associate ( K_hist => self % K_hist (), ntime => self % ntime ()) write_SIF : & do i = 1 , ntime write ( unit , '(f10.3,2a)' ) K_hist ( i ), new_line ( 'a' ) end do write_SIF end associate write ( unit , '(2a)' ) '/Chemistry Results' , new_line ( 'a' ) write ( unit , '(2a)' ) 'Cu content (%),  Ni Content (%), Chemistry Factor CF' , new_line ( 'a' ) associate ( Chemistry_Content => self % Chemistry_content (), Chemistry_factor => self % Chemistry_factor ()) write_chem : & do i = 1 , nsim write ( unit , '(3f10.3,2a)' ) Chemistry_content ( i , 1 ), Chemistry_content ( i , 2 ), Chemistry_factor ( i ), new_line ( 'a' ) end do write_chem end associate write ( unit , '(2a)' ) '/Vessel CPI data' , new_line ( 'a' ) write ( unit , '(2a)' ) 'Vessel RTndt (degF),  Vessel CPI, Cumulative Average CPI' , new_line ( 'a' ) associate ( R_Tndt => self % R_Tndt (), CPI => self % CPI (), CPI_Avg => self % CPI_avg ()) write_CPI : & do i = 1 , nsim write ( unit , '(3f10.3,a)' ) R_Tndt ( i ), CPI ( i ), CPI_avg ( i ), merge ( ' ' , new_line ( 'a' ), i == nsim ) end do write_CPI end associate end associate end procedure write_formatted end submodule detailed_output_s","tags":"","loc":"sourcefile/detailed_output_s.f90.html"},{"title":"Calc_cpi.f90 – miniFAVOR","text":"Files dependent on this one sourcefile~~calc_cpi.f90~~AfferentGraph sourcefile~calc_cpi.f90 Calc_cpi.f90 sourcefile~minifavor.f90 miniFAVOR.f90 sourcefile~minifavor.f90->sourcefile~calc_cpi.f90 sourcefile~output_data_s.f90 output_data_s.f90 sourcefile~output_data_s.f90->sourcefile~calc_cpi.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules calc_cpi Source Code Calc_cpi.f90 Source Code module calc_cpi implicit none contains ! calculate cpi(t) pure function cpi_t ( K , RTndt , T ) real :: cpi_t real , intent ( in ) :: K , RTndt , T real , parameter :: cKic = 4.0 associate ( & aKic => 1 9.35 + 8.335 * exp ( 0.02254 * ( T - RTndt )), & bKic => 1 5.61 + 5 0.132 * exp ( 0.008 * ( T - RTndt )) & ) cpi_t = merge ( 0.0 , 1 - exp ( - (( K - aKic ) / bKic ) ** cKic ), K < aKic ) end associate end function cpi_t end module calc_cpi","tags":"","loc":"sourcefile/calc_cpi.f90.html"},{"title":"output_data_m.f90 – miniFAVOR","text":"This file depends on sourcefile~~output_data_m.f90~~EfferentGraph sourcefile~output_data_m.f90 output_data_m.f90 sourcefile~random_samples_m.f90 random_samples_m.f90 sourcefile~output_data_m.f90->sourcefile~random_samples_m.f90 sourcefile~input_data_m.f90 input_data_m.f90 sourcefile~output_data_m.f90->sourcefile~input_data_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~output_data_m.f90~~AfferentGraph sourcefile~output_data_m.f90 output_data_m.f90 sourcefile~output_data_tests.f90 output_data_tests.f90 sourcefile~output_data_tests.f90->sourcefile~output_data_m.f90 sourcefile~detailed_output_m.f90 detailed_output_m.f90 sourcefile~detailed_output_m.f90->sourcefile~output_data_m.f90 sourcefile~minifavor.f90 miniFAVOR.f90 sourcefile~minifavor.f90->sourcefile~output_data_m.f90 sourcefile~minifavor.f90->sourcefile~detailed_output_m.f90 sourcefile~output_data_s.f90 output_data_s.f90 sourcefile~output_data_s.f90->sourcefile~output_data_m.f90 sourcefile~whole_shebang_tests.f90 whole_shebang_tests.f90 sourcefile~whole_shebang_tests.f90->sourcefile~output_data_m.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~output_data_tests.f90 sourcefile~detailed_output_s.f90 detailed_output_s.f90 sourcefile~detailed_output_s.f90->sourcefile~detailed_output_m.f90 sourcefile~main.f90~2 main.f90 sourcefile~main.f90~2->sourcefile~whole_shebang_tests.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules output_data_m Source Code output_data_m.f90 Source Code module output_data_m use input_data_m , only : input_data_t use oracle_interface , only : oracle_t use random_samples_m , only : random_samples_t implicit none private type , public , extends ( oracle_t ) :: output_data_t private type ( input_data_t ) input_data_ real , allocatable :: R_Tndt_ (:) real , allocatable :: K_hist_ (:), Chemistry_content_ (:,:), Chemistry_factor_ (:) real , allocatable :: CPI_ (:) real , allocatable :: CPI_avg_ (:) contains procedure :: assign generic :: assignment ( = ) => assign procedure :: norm procedure :: subtract procedure :: write_formatted procedure :: R_Tndt procedure :: K_hist procedure :: Chemistry_content procedure :: Chemistry_factor procedure :: CPI procedure :: CPI_avg procedure :: nsim procedure :: ntime end type interface output_data_t pure module function default_constructor () result ( new_output_data_t ) implicit none type ( output_data_t ) new_output_data_t end function module function whole_shebang ( input_data , random_samples ) result ( new_output_data ) implicit none type ( input_data_t ), intent ( in ) :: input_data type ( random_samples_t ), intent ( in ) :: random_samples (:) type ( output_data_t ) :: new_output_data end function pure module function new_output_data ( input_data , R_Tndt , K_hist , Chemistry_content , Chemistry_factor , CPI , CPI_avg ) implicit none type ( input_data_t ), intent ( in ) :: input_data real , intent ( in ) :: R_Tndt (:) real , intent ( in ) :: K_hist (:), Chemistry_content (:,:), Chemistry_factor (:) real , intent ( in ) :: CPI (:) real , intent ( in ) :: CPI_avg (:) type ( output_data_t ) new_output_data end function end interface interface module subroutine assign ( self , rhs ) implicit none class ( output_data_t ), intent ( inout ) :: self class ( oracle_t ), intent ( in ) :: rhs end subroutine module function subtract ( self , rhs ) result ( difference ) !! result has components corresponding to subtracting rhs's components fron self object's components implicit none class ( output_data_t ), intent ( in ) :: self class ( oracle_t ), intent ( in ) :: rhs class ( oracle_t ), allocatable :: difference end function pure module function norm ( self ) result ( norm_of_self ) !! result is a norm of the array formed by concatenating the real components of self object implicit none class ( output_data_t ), intent ( in ) :: self real norm_of_self end function module subroutine write_formatted ( self , unit , iotype , v_list , iostat , iomsg ) implicit none class ( output_data_t ), intent ( in ) :: self integer , intent ( in ) :: unit character ( * ), intent ( in ) :: iotype integer , intent ( in ) :: v_list (:) integer , intent ( out ) :: iostat character ( * ), intent ( inout ) :: iomsg end subroutine module function R_Tndt ( self ) result ( my_R_Tndt ) implicit none class ( output_data_t ), intent ( in ) :: self real , allocatable :: my_R_Tndt (:) end function module function K_hist ( self ) result ( my_K_hist ) implicit none class ( output_data_t ), intent ( in ) :: self real , allocatable :: my_K_hist (:) end function module function Chemistry_content ( self ) result ( my_Chemistry_content ) implicit none class ( output_data_t ), intent ( in ) :: self real , allocatable :: my_Chemistry_content (:,:) end function module function Chemistry_factor ( self ) result ( my_Chemistry_factor ) implicit none class ( output_data_t ), intent ( in ) :: self real , allocatable :: my_Chemistry_factor (:) end function module function CPI ( self ) result ( my_CPI ) implicit none class ( output_data_t ), intent ( in ) :: self real , allocatable :: my_CPI (:) end function module function CPI_avg ( self ) result ( my_CPI_avg ) implicit none class ( output_data_t ), intent ( in ) :: self real , allocatable :: my_CPI_avg (:) end function module function nsim ( self ) result ( my_nsim ) implicit none class ( output_data_t ), intent ( in ) :: self integer my_nsim end function module function ntime ( self ) result ( my_ntime ) implicit none class ( output_data_t ), intent ( in ) :: self integer my_ntime end function end interface end module output_data_m","tags":"","loc":"sourcefile/output_data_m.f90.html"},{"title":"Calc_K.f90 – miniFAVOR","text":"This file depends on sourcefile~~calc_k.f90~~EfferentGraph sourcefile~calc_k.f90 Calc_K.f90 sourcefile~commons.f90 Commons.f90 sourcefile~calc_k.f90->sourcefile~commons.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~calc_k.f90~~AfferentGraph sourcefile~calc_k.f90 Calc_K.f90 sourcefile~minifavor.f90 miniFAVOR.f90 sourcefile~minifavor.f90->sourcefile~calc_k.f90 sourcefile~output_data_s.f90 output_data_s.f90 sourcefile~output_data_s.f90->sourcefile~calc_k.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules calc_k Source Code Calc_K.f90 Source Code module calc_K implicit none contains !Function to calculate K(t) elemental function Ki_t ( a , b , stress ) use constants_h , only : Pi !Variables real :: Ki_t real , intent ( in ) :: a , b , stress !Calculate Ki_t Ki_t = stress * sqrt ( Pi * a ) * & ( 1.122 - 0.231 * ( a / b ) + 1 0.55 * ( a / b ) ** 2 - 2 1.71 * ( a / b ) ** 3 + 3 0.382 * ( a / b ) ** 4 ) end function Ki_t end module calc_K","tags":"","loc":"sourcefile/calc_k.f90.html"},{"title":"input_data_m.f90 – miniFAVOR","text":"Files dependent on this one sourcefile~~input_data_m.f90~~AfferentGraph sourcefile~input_data_m.f90 input_data_m.f90 sourcefile~input_data_tests.f90 input_data_tests.f90 sourcefile~input_data_tests.f90->sourcefile~input_data_m.f90 sourcefile~input_data_s.f90 input_data_s.F90 sourcefile~input_data_s.f90->sourcefile~input_data_m.f90 sourcefile~minifavor.f90 miniFAVOR.f90 sourcefile~minifavor.f90->sourcefile~input_data_m.f90 sourcefile~output_data_m.f90 output_data_m.f90 sourcefile~minifavor.f90->sourcefile~output_data_m.f90 sourcefile~detailed_output_m.f90 detailed_output_m.f90 sourcefile~minifavor.f90->sourcefile~detailed_output_m.f90 sourcefile~whole_shebang_tests.f90 whole_shebang_tests.f90 sourcefile~whole_shebang_tests.f90->sourcefile~input_data_m.f90 sourcefile~whole_shebang_tests.f90->sourcefile~output_data_m.f90 sourcefile~output_data_m.f90->sourcefile~input_data_m.f90 sourcefile~output_data_tests.f90 output_data_tests.f90 sourcefile~output_data_tests.f90->sourcefile~output_data_m.f90 sourcefile~main.f90~2 main.f90 sourcefile~main.f90~2->sourcefile~whole_shebang_tests.f90 sourcefile~detailed_output_m.f90->sourcefile~output_data_m.f90 sourcefile~output_data_s.f90 output_data_s.f90 sourcefile~output_data_s.f90->sourcefile~output_data_m.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~input_data_tests.f90 sourcefile~main.f90->sourcefile~output_data_tests.f90 sourcefile~detailed_output_s.f90 detailed_output_s.f90 sourcefile~detailed_output_s.f90->sourcefile~detailed_output_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules input_data_m Source Code input_data_m.f90 Source Code module input_data_m implicit none private public :: input_data_t type input_data_t private real :: a_ , b_ , Cu_ave_ , Ni_ave_ , Cu_sig_ , Ni_sig_ , fsurf_ , RTndt0_ real , allocatable , dimension (:) :: stress_ , temp_ integer :: nsim_ , ntime_ logical :: details_ contains procedure :: norm procedure :: subtract generic :: operator ( - ) => subtract procedure :: define procedure :: broadcast procedure :: a procedure :: b procedure :: nsim procedure :: ntime procedure :: details procedure :: Cu_ave procedure :: Cu_sig procedure :: Ni_ave procedure :: Ni_sig procedure :: fsurf procedure :: RTndt0 procedure :: stress procedure :: temp procedure :: assign generic :: assignment ( = ) => assign end type interface input_data_t pure module function default_input_data_t () result ( new_input_data_t ) implicit none type ( input_data_t ) new_input_data_t end function end interface interface pure module function norm ( self ) result ( norm_of_self ) implicit none class ( input_data_t ), intent ( in ) :: self real norm_of_self end function pure module function subtract ( self , rhs ) result ( difference ) implicit none class ( input_data_t ), intent ( in ) :: self type ( input_data_t ), intent ( in ) :: rhs type ( input_data_t ) difference end function module subroutine define ( self , fn_IN ) implicit none class ( input_data_t ), intent ( out ) :: self character ( len =* ), intent ( in ) :: fn_IN end subroutine module subroutine broadcast ( self , source_image ) implicit none class ( input_data_t ), intent ( inout ) :: self integer , intent ( in ) :: source_image end subroutine pure module function a ( self ) result ( self_a ) implicit none class ( input_data_t ), intent ( in ) :: self real self_a end function pure module function b ( self ) result ( self_b ) implicit none class ( input_data_t ), intent ( in ) :: self real self_b end function pure module function nsim ( self ) result ( self_nsim ) implicit none class ( input_data_t ), intent ( in ) :: self integer self_nsim end function pure module function ntime ( self ) result ( self_ntime ) implicit none class ( input_data_t ), intent ( in ) :: self integer self_ntime end function pure module function details ( self ) result ( self_details ) implicit none class ( input_data_t ), intent ( in ) :: self logical self_details end function pure module function Cu_ave ( self ) result ( self_Cu_ave ) implicit none class ( input_data_t ), intent ( in ) :: self real self_Cu_ave end function pure module function Cu_sig ( self ) result ( self_Cu_sig ) implicit none class ( input_data_t ), intent ( in ) :: self real self_Cu_sig end function pure module function Ni_ave ( self ) result ( self_Ni_ave ) implicit none class ( input_data_t ), intent ( in ) :: self real self_Ni_ave end function pure module function Ni_sig ( self ) result ( self_Ni_sig ) implicit none class ( input_data_t ), intent ( in ) :: self real self_Ni_sig end function pure module function fsurf ( self ) result ( self_fsurf ) implicit none class ( input_data_t ), intent ( in ) :: self real self_fsurf end function pure module function RTndt0 ( self ) result ( self_RTndt0 ) implicit none class ( input_data_t ), intent ( in ) :: self real self_RTndt0 end function pure module function stress ( self ) result ( self_stress ) implicit none class ( input_data_t ), intent ( in ) :: self real , allocatable :: self_stress (:) end function pure module function temp ( self ) result ( self_temp ) implicit none class ( input_data_t ), intent ( in ) :: self real , allocatable :: self_temp (:) end function pure module subroutine assign ( lhs , rhs ) class ( input_data_t ), intent ( inout ) :: lhs type ( input_data_t ), intent ( in ) :: rhs end subroutine end interface end module input_data_m","tags":"","loc":"sourcefile/input_data_m.f90.html"},{"title":"random_samples_m.f90 – miniFAVOR","text":"Files dependent on this one sourcefile~~random_samples_m.f90~~AfferentGraph sourcefile~random_samples_m.f90 random_samples_m.f90 sourcefile~random_samples_tests.f90 random_samples_tests.f90 sourcefile~random_samples_tests.f90->sourcefile~random_samples_m.f90 sourcefile~minifavor.f90 miniFAVOR.f90 sourcefile~minifavor.f90->sourcefile~random_samples_m.f90 sourcefile~output_data_m.f90 output_data_m.f90 sourcefile~minifavor.f90->sourcefile~output_data_m.f90 sourcefile~detailed_output_m.f90 detailed_output_m.f90 sourcefile~minifavor.f90->sourcefile~detailed_output_m.f90 sourcefile~random_samples_s.f90 random_samples_s.f90 sourcefile~random_samples_s.f90->sourcefile~random_samples_m.f90 sourcefile~whole_shebang_tests.f90 whole_shebang_tests.f90 sourcefile~whole_shebang_tests.f90->sourcefile~random_samples_m.f90 sourcefile~whole_shebang_tests.f90->sourcefile~output_data_m.f90 sourcefile~output_data_m.f90->sourcefile~random_samples_m.f90 sourcefile~output_data_tests.f90 output_data_tests.f90 sourcefile~output_data_tests.f90->sourcefile~output_data_m.f90 sourcefile~main.f90~2 main.f90 sourcefile~main.f90~2->sourcefile~whole_shebang_tests.f90 sourcefile~detailed_output_m.f90->sourcefile~output_data_m.f90 sourcefile~output_data_s.f90 output_data_s.f90 sourcefile~output_data_s.f90->sourcefile~output_data_m.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~random_samples_tests.f90 sourcefile~main.f90->sourcefile~output_data_tests.f90 sourcefile~detailed_output_s.f90 detailed_output_s.f90 sourcefile~detailed_output_s.f90->sourcefile~detailed_output_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules random_samples_m Source Code random_samples_m.f90 Source Code module random_samples_m use object_interface , only : object_t implicit none private public :: random_samples_t type , extends ( object_t ) :: random_samples_t private real :: Cu_sig_local_ real :: Cu_local_ real :: Ni_local_ real :: phi_ contains procedure :: define procedure :: write_formatted procedure :: Cu_sig_local procedure :: Cu_local procedure :: Ni_local procedure :: phi end type interface module subroutine define ( self ) implicit none class ( random_samples_t ), intent ( out ) :: self end subroutine module subroutine write_formatted ( self , unit , iotype , v_list , iostat , iomsg ) implicit none class ( random_samples_t ), intent ( in ) :: self integer , intent ( in ) :: unit character ( * ), intent ( in ) :: iotype integer , intent ( in ) :: v_list (:) integer , intent ( out ) :: iostat character ( * ), intent ( inout ) :: iomsg end subroutine pure module function Cu_sig_local ( self ) result ( self_Cu_sig_local ) implicit none class ( random_samples_t ), intent ( in ) :: self real self_Cu_sig_local end function pure module function Cu_local ( self ) result ( self_Cu_local ) implicit none class ( random_samples_t ), intent ( in ) :: self real self_Cu_local end function pure module function Ni_local ( self ) result ( self_Ni_local ) implicit none class ( random_samples_t ), intent ( in ) :: self real self_Ni_local end function elemental module function phi ( self ) result ( self_phi ) implicit none class ( random_samples_t ), intent ( in ) :: self real self_phi end function end interface end module","tags":"","loc":"sourcefile/random_samples_m.f90.html"},{"title":"output_data_s.f90 – miniFAVOR","text":"This file depends on sourcefile~~output_data_s.f90~~EfferentGraph sourcefile~output_data_s.f90 output_data_s.f90 sourcefile~material_content_m.f90 material_content_m.f90 sourcefile~output_data_s.f90->sourcefile~material_content_m.f90 sourcefile~calc_k.f90 Calc_K.f90 sourcefile~output_data_s.f90->sourcefile~calc_k.f90 sourcefile~calc_rtndt.f90 Calc_RTndt.f90 sourcefile~output_data_s.f90->sourcefile~calc_rtndt.f90 sourcefile~calc_cpi.f90 Calc_cpi.f90 sourcefile~output_data_s.f90->sourcefile~calc_cpi.f90 sourcefile~output_data_m.f90 output_data_m.f90 sourcefile~output_data_s.f90->sourcefile~output_data_m.f90 sourcefile~commons.f90 Commons.f90 sourcefile~calc_k.f90->sourcefile~commons.f90 sourcefile~calc_rtndt.f90->sourcefile~material_content_m.f90 sourcefile~calc_rtndt.f90->sourcefile~commons.f90 sourcefile~random_samples_m.f90 random_samples_m.f90 sourcefile~output_data_m.f90->sourcefile~random_samples_m.f90 sourcefile~input_data_m.f90 input_data_m.f90 sourcefile~output_data_m.f90->sourcefile~input_data_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Submodules output_data_s Source Code output_data_s.f90 Source Code submodule ( output_data_m ) output_data_s use assertions_interface , only : assert implicit none contains module procedure default_constructor new_output_data_t % input_data_ = input_data_t () new_output_data_t % R_Tndt_ = [ 0. ] new_output_data_t % K_hist_ = [ 0. ] new_output_data_t % Chemistry_content_ = reshape ([ 0. ], [ 1 , 1 ]) new_output_data_t % Chemistry_factor_ = [ 0. ] new_output_data_t % CPI_ = [ 0. ] new_output_data_t % CPI_avg_ = [ 0. ] end procedure module procedure whole_shebang use calc_RTndt , only : RTndt , CF use calc_K , only : Ki_t use calc_cpi , only : cpi_t use material_content_m , only : material_content_t , gather use data_partition_interface , only : data_partition_t integer :: i , j type ( data_partition_t ) data_partition type ( material_content_t ), allocatable :: material_content (:) real , allocatable :: CPI (:) real , allocatable , dimension (:) :: R_Tndt , CPI_avg , Chemistry_factor real , allocatable , dimension (:,:) :: content integer , parameter :: nmaterials = 2 associate ( & K_hist => Ki_t ( input_data % a (), input_data % b (), input_data % stress ()), & nsim => input_data % nsim (), & ntime => input_data % ntime (), & me => this_image () & ) call assert ( nsim > 0 , \"whole_shebang: nsim>0\" , nsim ) allocate ( R_Tndt ( nsim ), CPI_avg ( nsim ), Chemistry_factor ( nsim ), material_content ( nsim )) call data_partition % define_partitions ( cardinality = nsim ) associate ( my_first => data_partition % first ( me ), my_last => data_partition % last ( me )) !Sample chemistry: assign Cu content and Ni content material_content ( my_first : my_last ) = material_content_t ( & input_data % Cu_ave (), input_data % Ni_ave (), input_data % Cu_sig (), input_data % Ni_sig (), random_samples ( my_first : my_last ) & ) Chemistry_factor ( my_first : my_last ) = CF ( material_content ( my_first : my_last )% Cu (), material_content ( my_first : my_last )% Ni ()) !Calculate RTndt for this vessel trial: CPI_results(i,1) is RTndt R_Tndt ( my_first : my_last ) = RTndt ( & input_data % a (), Chemistry_factor ( my_first : my_last ), input_data % fsurf (), input_data % RTndt0 (), & random_samples ( my_first : my_last )% phi () & ) block real , dimension (:,:), allocatable :: cpi_hist !Start looping over number of simulations allocate ( cpi_hist ( my_first : my_last , ntime )) do j = 1 , ntime do concurrent ( i = my_first : my_last ) ! Instantaneous cpi(t) associate ( temp => input_data % temp ()) cpi_hist ( i , j ) = cpi_t ( K_hist ( j ), R_Tndt ( i ), temp ( j )) end associate end do end do allocate ( CPI ( nsim )) CPI ( my_first : my_last ) = [( maxval ( cpi_hist ( i ,:)), i = my_first , my_last )] end block call data_partition % gather ( CPI , dim = 1 ) ! Moving average CPI for all trials CPI_avg = [( sum ( CPI ( 1 : i )) / i , i = 1 , nsim )] call gather ( material_content , data_partition , dim = 1 ) content = reshape ([ material_content % Cu (), material_content % Ni ()], [ nsim , nmaterials ] ) call data_partition % gather ( content , dim = 1 ) call data_partition % gather ( R_tndt , dim = 1 ) call data_partition % gather ( CPI , dim = 1 ) call data_partition % gather ( CPI_avg , dim = 1 ) call data_partition % gather ( Chemistry_factor , dim = 1 ) new_output_data = output_data_t ( & input_data = input_data , R_Tndt = R_Tndt , CPI = CPI , CPI_avg = CPI_avg , K_hist = K_hist , & Chemistry_content = content , Chemistry_factor = Chemistry_factor & ) end associate end associate end procedure module procedure assign call assert ( same_type_as ( self , rhs ), \"output_data_t%assign: same_type_as(self, rhs)\" ) select type ( rhs ) type is ( output_data_t ) self % input_data_ = rhs % input_data_ self % R_Tndt_ = rhs % R_Tndt_ self % K_hist_ = rhs % K_hist_ self % Chemistry_content_ = rhs % Chemistry_content_ self % Chemistry_factor_ = rhs % Chemistry_factor_ self % CPI_ = rhs % CPI_ self % CPI_avg_ = rhs % CPI_avg_ class default error stop \"output_data_t%assign: unsupported rhs type\" end select end procedure module procedure norm !! compute L-infinity norm norm_of_self = maxval ( abs ([ & self % input_data_ % norm (), self % R_Tndt_ , self % K_hist_ , self % Chemistry_content_ , self % Chemistry_factor_ , self % CPI_ , & self % CPI_avg_ & ])) end procedure module procedure subtract type ( output_data_t ) local_difference call assert ( same_type_as ( self , rhs ), \"output_data_t%subtract: same_type_as(self, rhs)\" ) select type ( rhs ) type is ( output_data_t ) local_difference % input_data_ = self % input_data_ - rhs % input_data_ local_difference % R_Tndt_ = self % R_Tndt_ - rhs % R_Tndt_ local_difference % K_hist_ = self % K_hist_ - rhs % K_hist_ local_difference % Chemistry_content_ = self % Chemistry_content_ - rhs % Chemistry_content_ local_difference % Chemistry_factor_ = self % Chemistry_factor_ - rhs % Chemistry_factor_ local_difference % CPI_ = self % CPI_ - rhs % CPI_ local_difference % CPI_avg_ = self % CPI_avg_ - rhs % CPI_avg_ class default error stop \"output_data_t%subtract: rhs type unsupported\" end select difference = local_difference end procedure module procedure new_output_data new_output_data % input_data_ = input_data new_output_data % R_Tndt_ = R_Tndt new_output_data % K_hist_ = K_hist new_output_data % Chemistry_content_ = Chemistry_content new_output_data % Chemistry_factor_ = Chemistry_factor new_output_data % CPI_ = CPI new_output_data % CPI_avg_ = CPI_avg end procedure module procedure write_formatted associate ( nsim => self % input_data_ % nsim ()) !Write important outputs summary write ( unit , '(2a)' ) 'MiniFAVOR Output Summary' , new_line ( 'a' ) write ( unit , '(2a)' ) '/Key inputs/' , new_line ( 'a' ) write ( unit , '(a25,f10.3,2a)' ) 'Crack Depth: ' , self % input_data_ % a (), ' in' , new_line ( 'a' ) write ( unit , '(a25,f10.3,2a)' ) 'Vessel Thickness: ' , self % input_data_ % b (), ' in' , new_line ( 'a' ) write ( unit , '(a25,i10,a)' ) 'Number of Simulations: ' , nsim , new_line ( 'a' ) write ( unit , '(a25,f10.3,2a)' ) 'Copper Content: ' , self % input_data_ % Cu_ave (), ' %' , new_line ( 'a' ) write ( unit , '(a25,f10.3,2a)' ) 'Nickel Content: ' , self % input_data_ % Ni_ave (), ' %' , new_line ( 'a' ) write ( unit , '(a25,f10.3,2a)' ) 'Copper Content STDEV: ' , self % input_data_ % Cu_sig (), ' %' , new_line ( 'a' ) write ( unit , '(a25,f10.3,2a)' ) 'Nickel Content STDEV: ' , self % input_data_ % Ni_sig (), ' %' , new_line ( 'a' ) write ( unit , '(a25,f10.3,2a)' ) 'ID Surface Fluence: ' , self % input_data_ % fsurf (), ' n/cm&#94;2' , new_line ( 'a' ) write ( unit , '(a25,f10.3,2a)' ) 'Unirradiated RTndt: ' , self % input_data_ % RTndt0 (), ' degF' , new_line ( 'a' ) write ( unit , '(2a)' ) '/Results/' , new_line ( 'a' ) write ( unit , '(a25,f10.3,a)' ) 'Final CPI: ' , self % CPI_avg_ ( nsim ), new_line ( 'a' ) write ( unit , '(a25,f10.3,2a)' ) 'Minimum crack tip RTndt: ' , & minval ( self % R_Tndt_ ), ' degF' , new_line ( 'a' ) write ( unit , '(a25,f10.3,2a)' ) 'Maximum crack tip  RTndt: ' , & maxval ( self % R_Tndt_ ), ' degF' , new_line ( 'a' ) write ( unit , '(a25,f10.3,a)' ) 'Average crack tip RTndt: ' , & sum ( self % R_Tndt_ ) / nsim , ' degF' end associate end procedure write_formatted module procedure R_Tndt my_R_Tndt = self % R_Tndt_ end procedure module procedure K_hist my_K_hist = self % K_hist_ end procedure module procedure Chemistry_content my_Chemistry_content = self % Chemistry_content_ end procedure module procedure Chemistry_factor my_Chemistry_factor = self % Chemistry_factor_ end procedure module procedure CPI my_CPI = self % CPI_ end procedure module procedure CPI_avg my_CPI_avg = self % CPI_avg_ end procedure module procedure nsim my_nsim = self % input_data_ % nsim () end procedure module procedure ntime my_ntime = self % input_data_ % ntime () end procedure end submodule output_data_s","tags":"","loc":"sourcefile/output_data_s.f90.html"},{"title":"output_data_tests.f90 – miniFAVOR","text":"This file depends on sourcefile~~output_data_tests.f90~~EfferentGraph sourcefile~output_data_tests.f90 output_data_tests.f90 sourcefile~output_data_m.f90 output_data_m.f90 sourcefile~output_data_tests.f90->sourcefile~output_data_m.f90 sourcefile~random_samples_m.f90 random_samples_m.f90 sourcefile~output_data_m.f90->sourcefile~random_samples_m.f90 sourcefile~input_data_m.f90 input_data_m.f90 sourcefile~output_data_m.f90->sourcefile~input_data_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~output_data_tests.f90~~AfferentGraph sourcefile~output_data_tests.f90 output_data_tests.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~output_data_tests.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules output_data_tests Source Code output_data_tests.f90 Source Code module output_data_tests use output_data_m , only : output_data_t use vegetables , only : result_t , test_item_t , it , assert_equals , describe , assert_that use iso_fortran_env , only : real64 implicit none contains function check_norm_of_difference () result ( result_ ) type ( result_t ) result_ type ( output_data_t ) output_data , difference output_data = output_data_t () difference = output_data - output_data result_ = assert_equals ( 0._real64 , real ( difference % norm (), real64 )) end function function test_output_data () result ( test_item ) type ( test_item_t ) test_item test_item = describe ( & \"output_data_t\" , & [ it ( & \"norm of difference between an object and itself is zero\" , & check_norm_of_difference )] & ) end function end module output_data_tests","tags":"","loc":"sourcefile/output_data_tests.f90.html"},{"title":"input_data_tests.f90 – miniFAVOR","text":"This file depends on sourcefile~~input_data_tests.f90~~EfferentGraph sourcefile~input_data_tests.f90 input_data_tests.f90 sourcefile~input_data_m.f90 input_data_m.f90 sourcefile~input_data_tests.f90->sourcefile~input_data_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~input_data_tests.f90~~AfferentGraph sourcefile~input_data_tests.f90 input_data_tests.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~input_data_tests.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules input_data_tests Source Code input_data_tests.f90 Source Code module input_data_tests use input_data_m , only : input_data_t use vegetables , only : result_t , test_item_t , it , describe , assert_equals , assert_that use iso_fortran_env , only : real64 implicit none contains function check_norm_of_difference () result ( result_ ) type ( result_t ) result_ type ( input_data_t ) input_data , difference input_data = input_data_t () difference = input_data - input_data result_ = assert_equals ( 0._real64 , real ( difference % norm (), real64 )) end function function test_input_data () result ( test_item ) type ( test_item_t ) test_item test_item = describe ( & \"input_data_t\" , & [ it ( & \"norm of difference between an object and itself is zero\" , & check_norm_of_difference )] & ) end function end module input_data_tests","tags":"","loc":"sourcefile/input_data_tests.f90.html"},{"title":"random_samples_tests.f90 – miniFAVOR","text":"This file depends on sourcefile~~random_samples_tests.f90~~EfferentGraph sourcefile~random_samples_tests.f90 random_samples_tests.f90 sourcefile~random_samples_m.f90 random_samples_m.f90 sourcefile~random_samples_tests.f90->sourcefile~random_samples_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~random_samples_tests.f90~~AfferentGraph sourcefile~random_samples_tests.f90 random_samples_tests.f90 sourcefile~main.f90 main.f90 sourcefile~main.f90->sourcefile~random_samples_tests.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules random_samples_tests Source Code random_samples_tests.f90 Source Code module random_samples_tests use random_samples_m , only : random_samples_t use vegetables , only : result_t , test_item_t , it , assert_that , describe implicit none contains function check_definition () result ( result_ ) type ( result_t ) result_ type ( random_samples_t ) random_samples call random_samples % define result_ = assert_that ( random_samples % user_defined ()) end function function test_random_samples () result ( test_item ) type ( test_item_t ) test_item test_item = describe ( & \"random_sample_t\" , & [ it ( & \"is marked as user-defined after calling define()\" , & check_definition )] & ) end function end module random_samples_tests","tags":"","loc":"sourcefile/random_samples_tests.f90.html"},{"title":"main.f90 – miniFAVOR","text":"This file depends on sourcefile~~main.f90~~EfferentGraph sourcefile~main.f90 main.f90 sourcefile~input_data_tests.f90 input_data_tests.f90 sourcefile~main.f90->sourcefile~input_data_tests.f90 sourcefile~output_data_tests.f90 output_data_tests.f90 sourcefile~main.f90->sourcefile~output_data_tests.f90 sourcefile~random_samples_tests.f90 random_samples_tests.f90 sourcefile~main.f90->sourcefile~random_samples_tests.f90 sourcefile~input_data_m.f90 input_data_m.f90 sourcefile~input_data_tests.f90->sourcefile~input_data_m.f90 sourcefile~output_data_m.f90 output_data_m.f90 sourcefile~output_data_tests.f90->sourcefile~output_data_m.f90 sourcefile~random_samples_m.f90 random_samples_m.f90 sourcefile~random_samples_tests.f90->sourcefile~random_samples_m.f90 sourcefile~output_data_m.f90->sourcefile~random_samples_m.f90 sourcefile~output_data_m.f90->sourcefile~input_data_m.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Programs main Source Code main.f90 Source Code ! Generated by make_vegetable_driver. DO NOT EDIT program main implicit none call run () contains subroutine run () use input_data_tests , only : & input_data_tests_test_input_data => test_input_data use output_data_tests , only : & output_data_tests_test_output_data => test_output_data use random_samples_tests , only : & random_samples_tests_test_random_samples => test_random_samples use vegetables , only : test_item_t , test_that , run_tests type ( test_item_t ) :: tests type ( test_item_t ) :: individual_tests ( 3 ) individual_tests ( 1 ) = input_data_tests_test_input_data () individual_tests ( 2 ) = output_data_tests_test_output_data () individual_tests ( 3 ) = random_samples_tests_test_random_samples () tests = test_that ( individual_tests ) call run_tests ( tests ) end subroutine end program","tags":"","loc":"sourcefile/main.f90.html"},{"title":"whole_shebang_tests.f90 – miniFAVOR","text":"This file depends on sourcefile~~whole_shebang_tests.f90~~EfferentGraph sourcefile~whole_shebang_tests.f90 whole_shebang_tests.f90 sourcefile~input_data_m.f90 input_data_m.f90 sourcefile~whole_shebang_tests.f90->sourcefile~input_data_m.f90 sourcefile~random_samples_m.f90 random_samples_m.f90 sourcefile~whole_shebang_tests.f90->sourcefile~random_samples_m.f90 sourcefile~commons.f90~2 Commons.f90 sourcefile~whole_shebang_tests.f90->sourcefile~commons.f90~2 sourcefile~output_data_m.f90 output_data_m.f90 sourcefile~whole_shebang_tests.f90->sourcefile~output_data_m.f90 sourcefile~minifavor.f90~2 miniFAVOR.f90 sourcefile~whole_shebang_tests.f90->sourcefile~minifavor.f90~2 sourcefile~output_data_m.f90->sourcefile~input_data_m.f90 sourcefile~output_data_m.f90->sourcefile~random_samples_m.f90 sourcefile~minifavor.f90~2->sourcefile~commons.f90~2 sourcefile~calc_k.f90~2 Calc_K.f90 sourcefile~minifavor.f90~2->sourcefile~calc_k.f90~2 sourcefile~calc_rtndt.f90~2 Calc_RTndt.f90 sourcefile~minifavor.f90~2->sourcefile~calc_rtndt.f90~2 sourcefile~calc_cpi.f90~2 Calc_cpi.f90 sourcefile~minifavor.f90~2->sourcefile~calc_cpi.f90~2 sourcefile~calc_k.f90~2->sourcefile~commons.f90~2 sourcefile~calc_rtndt.f90~2->sourcefile~commons.f90~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~whole_shebang_tests.f90~~AfferentGraph sourcefile~whole_shebang_tests.f90 whole_shebang_tests.f90 sourcefile~main.f90~2 main.f90 sourcefile~main.f90~2->sourcefile~whole_shebang_tests.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules whole_shebang_tests Source Code whole_shebang_tests.f90 Source Code module whole_shebang_tests use input_data_m , only : input_data_t use output_data_m , only : output_data_t use random_samples_m , only : random_samples_t use vegetables , only : result_t , test_item_t , it , assert_equals , describe , assert_that use iso_fortran_env , only : real64 implicit none contains function check_whole_shebang () result ( result_ ) type ( result_t ) result_ type ( input_data_t ) input_data type ( output_data_t ) output_data , reference_data type ( random_samples_t ), allocatable :: samples (:) integer , parameter :: input_file_reader = 1 integer i if ( this_image () == input_file_reader ) call input_data % define ( \"test.in\" ) call input_data % broadcast ( source_image = input_file_reader ) associate ( nsim => input_data % nsim ()) allocate ( samples ( nsim )) do i = 1 , nsim ! This cannot be parallelized or reordered without the results changing call samples ( i )% define () end do end associate output_data = output_data_t ( input_data , samples ) ! invoke generic interface for the whole_shebang function reference_data = reference_wrapper ( input_data ) result_ = assert_that ( output_data % within_tolerance ( reference_data , tolerance = 1.E-06 )) end function function test_output_data () result ( test_item ) type ( test_item_t ) test_item test_item = describe ( & \"whole_shebang\" , & [ it ( & \"matches a reference implementation\" , & check_whole_shebang )] & ) end function function reference_wrapper ( input_data ) result ( output_data ) use reference_miniFAVOR_m , only : reference_miniFAVOR use reference_inputs_h , only : a , b , nsim , ntime , details , stress , temp , Cu_ave , Ni_ave , Cu_sig , Ni_sig , fsurf , RTndt0 use reference_outputs_h , only : K_hist , Chemistry , CPI_results type ( input_data_t ), intent ( in ) :: input_data type ( output_data_t ) :: output_data a = input_data % a () b = input_data % b () nsim = input_data % nsim () ntime = input_data % ntime () details = input_data % details () stress = input_data % stress () temp = input_data % temp () Cu_ave = input_data % Cu_ave () Ni_ave = input_data % Ni_ave () Cu_sig = input_data % Cu_sig () Ni_sig = input_data % Ni_sig () fsurf = input_data % fsurf () RTndt0 = input_data % RTndt0 () call reference_miniFAVOR output_data = output_data_t ( & input_data , CPI_results (:, 1 ), K_hist , Chemistry (:, 1 : 2 ), Chemistry (:, 3 ), CPI_results (:, 2 ), CPI_results (:, 3 )) end function end module whole_shebang_tests","tags":"","loc":"sourcefile/whole_shebang_tests.f90.html"},{"title":"main.f90 – miniFAVOR","text":"This file depends on sourcefile~~main.f90~2~~EfferentGraph sourcefile~main.f90~2 main.f90 sourcefile~whole_shebang_tests.f90 whole_shebang_tests.f90 sourcefile~main.f90~2->sourcefile~whole_shebang_tests.f90 sourcefile~input_data_m.f90 input_data_m.f90 sourcefile~whole_shebang_tests.f90->sourcefile~input_data_m.f90 sourcefile~random_samples_m.f90 random_samples_m.f90 sourcefile~whole_shebang_tests.f90->sourcefile~random_samples_m.f90 sourcefile~commons.f90~2 Commons.f90 sourcefile~whole_shebang_tests.f90->sourcefile~commons.f90~2 sourcefile~output_data_m.f90 output_data_m.f90 sourcefile~whole_shebang_tests.f90->sourcefile~output_data_m.f90 sourcefile~minifavor.f90~2 miniFAVOR.f90 sourcefile~whole_shebang_tests.f90->sourcefile~minifavor.f90~2 sourcefile~output_data_m.f90->sourcefile~input_data_m.f90 sourcefile~output_data_m.f90->sourcefile~random_samples_m.f90 sourcefile~minifavor.f90~2->sourcefile~commons.f90~2 sourcefile~calc_k.f90~2 Calc_K.f90 sourcefile~minifavor.f90~2->sourcefile~calc_k.f90~2 sourcefile~calc_rtndt.f90~2 Calc_RTndt.f90 sourcefile~minifavor.f90~2->sourcefile~calc_rtndt.f90~2 sourcefile~calc_cpi.f90~2 Calc_cpi.f90 sourcefile~minifavor.f90~2->sourcefile~calc_cpi.f90~2 sourcefile~calc_k.f90~2->sourcefile~commons.f90~2 sourcefile~calc_rtndt.f90~2->sourcefile~commons.f90~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Programs main Source Code main.f90 Source Code ! Generated by make_vegetable_driver. DO NOT EDIT program main implicit none call run () contains subroutine run () use whole_shebang_tests , only : & whole_shebang_tests_test_output_data => test_output_data use vegetables , only : test_item_t , test_that , run_tests type ( test_item_t ) :: tests type ( test_item_t ) :: individual_tests ( 1 ) individual_tests ( 1 ) = whole_shebang_tests_test_output_data () tests = test_that ( individual_tests ) call run_tests ( tests ) end subroutine end program","tags":"","loc":"sourcefile/main.f90~2.html"},{"title":"Commons.f90 – miniFAVOR","text":"Files dependent on this one sourcefile~~commons.f90~2~~AfferentGraph sourcefile~commons.f90~2 Commons.f90 sourcefile~minifavor.f90~2 miniFAVOR.f90 sourcefile~minifavor.f90~2->sourcefile~commons.f90~2 sourcefile~calc_rtndt.f90~2 Calc_RTndt.f90 sourcefile~minifavor.f90~2->sourcefile~calc_rtndt.f90~2 sourcefile~calc_k.f90~2 Calc_K.f90 sourcefile~minifavor.f90~2->sourcefile~calc_k.f90~2 sourcefile~whole_shebang_tests.f90 whole_shebang_tests.f90 sourcefile~whole_shebang_tests.f90->sourcefile~commons.f90~2 sourcefile~whole_shebang_tests.f90->sourcefile~minifavor.f90~2 sourcefile~calc_rtndt.f90~2->sourcefile~commons.f90~2 sourcefile~calc_k.f90~2->sourcefile~commons.f90~2 sourcefile~main.f90~2 main.f90 sourcefile~main.f90~2->sourcefile~whole_shebang_tests.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules reference_inputs_h reference_constants_h reference_outputs_h Source Code Commons.f90 Source Code module reference_inputs_h implicit none real :: a , b integer :: nsim , ntime logical :: details real , dimension (:), allocatable :: stress , temp real :: Cu_ave , Ni_ave , Cu_sig , Ni_sig , fsurf , RTndt0 end module module reference_constants_h implicit none real , parameter :: Pi = 4.D0 * DATAN ( 1.D0 ) real , dimension ( 0 : 40 , 7 ), parameter :: CF_weld = reshape ( ( / & 20 , 20 , 21 , 22 , 24 , 26 , 29 , 32 , 36 , 40 , & 44 , 49 , 52 , 58 , 61 , 66 , 70 , 75 , 79 , 83 , & 88 , 92 , 97 , 101 , 105 , 110 , 113 , 119 , 122 , 128 , & 131 , 136 , 140 , 144 , 149 , 153 , 158 , 162 , 166 , 171 , & 175 , & 20 , 20 , 26 , 35 , 43 , 49 , 52 , 55 , 58 , 61 , & 65 , 68 , 72 , 76 , 79 , 84 , 88 , 92 , 95 , 100 , & 104 , 108 , 112 , 117 , 121 , 126 , 130 , 134 , 138 , 142 , & 146 , 151 , 155 , 160 , 164 , 168 , 172 , 177 , 182 , 185 , & 189 , & 20 , 20 , 27 , 41 , 54 , 67 , 77 , 85 , 90 , 94 , & 97 , 101 , 103 , 106 , 109 , 112 , 115 , 119 , 122 , 126 , & 129 , 133 , 137 , 140 , 144 , 148 , 151 , 155 , 160 , 164 , & 167 , 172 , 175 , 180 , 184 , 187 , 191 , 196 , 200 , 203 , & 207 , & 20 , 20 , 27 , 41 , 54 , 68 , 82 , 95 , 106 , 115 , & 122 , 130 , 135 , 139 , 142 , 146 , 149 , 151 , 154 , 157 , & 160 , 164 , 167 , 169 , 173 , 176 , 180 , 184 , 187 , 191 , & 194 , 198 , 202 , 205 , 209 , 212 , 216 , 220 , 223 , 227 , & 231 , & 20 , 20 , 27 , 41 , 54 , 68 , 82 , 95 , 108 , 122 , & 133 , 144 , 153 , 162 , 168 , 175 , 178 , 184 , 187 , 191 , & 194 , 197 , 200 , 203 , 206 , 209 , 212 , 216 , 218 , 222 , & 225 , 228 , 231 , 234 , 238 , 241 , 245 , 248 , 250 , 254 , & 257 , & 20 , 20 , 27 , 41 , 54 , 68 , 82 , 95 , 108 , 122 , & 135 , 148 , 161 , 172 , 182 , 191 , 199 , 207 , 214 , 220 , & 223 , 229 , 232 , 236 , 239 , 243 , 246 , 249 , 251 , 254 , & 257 , 260 , 263 , 266 , 269 , 272 , 275 , 278 , 281 , 285 , & 288 , & 20 , 20 , 27 , 41 , 54 , 68 , 82 , 95 , 108 , 122 , & 135 , 148 , 161 , 176 , 188 , 200 , 211 , 221 , 230 , 238 , & 245 , 252 , 257 , 263 , 268 , 272 , 276 , 280 , 284 , 287 , & 290 , 293 , 296 , 299 , 302 , 305 , 308 , 311 , 314 , 317 , & 320 / ), ( / 41 , 7 / )) end module module reference_outputs_h implicit none real , dimension (:), allocatable :: K_hist real , dimension (:,:), allocatable :: Chemistry real , dimension (:,:), allocatable :: cpi_hist real , dimension (:,:), allocatable :: CPI_results end module","tags":"","loc":"sourcefile/commons.f90~2.html"},{"title":"Calc_RTndt.f90 – miniFAVOR","text":"This file depends on sourcefile~~calc_rtndt.f90~2~~EfferentGraph sourcefile~calc_rtndt.f90~2 Calc_RTndt.f90 sourcefile~commons.f90~2 Commons.f90 sourcefile~calc_rtndt.f90~2->sourcefile~commons.f90~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~calc_rtndt.f90~2~~AfferentGraph sourcefile~calc_rtndt.f90~2 Calc_RTndt.f90 sourcefile~minifavor.f90~2 miniFAVOR.f90 sourcefile~minifavor.f90~2->sourcefile~calc_rtndt.f90~2 sourcefile~whole_shebang_tests.f90 whole_shebang_tests.f90 sourcefile~whole_shebang_tests.f90->sourcefile~minifavor.f90~2 sourcefile~main.f90~2 main.f90 sourcefile~main.f90~2->sourcefile~whole_shebang_tests.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules reference_calc_rtndt Source Code Calc_RTndt.f90 Source Code module reference_calc_RTndt implicit none contains !RTndt_x calculation function RTndt ( a , CF , fsurf , RTndt0 ) !Variables real :: RTndt , D_RTepi , D_RTndt , phi , f real , intent ( in ) :: a , CF , fsurf , RTndt0 !Calculate D_RTepi call RANDOM_NUMBER ( phi ) D_RTepi = - 2 9.5 + 7 8.0 * ( - log ( 1 - phi )) ** ( 1 / 1.73 ) !Calculate D_RTndt f = fsurf * exp ( - 0.24 * a ) D_RTndt = CF * f ** ( 0.28 - 0.10 * log10 ( f )) !Calculate the RTndt RTndt = RTndt0 + D_RTepi + D_RTndt end function RTndt !This function calculates the weld chemistry factor given the copper and nickel contents function CF ( Cu , Ni ) use reference_constants_h , only : CF_weld !Variables real :: CF real , intent ( in ) :: Cu , Ni integer :: Cu_int , Ni_int real :: CF_1 , CF_2 !Calculate indexes for copper interpolation: !  multiply the Cu-% by 100 and take the integer truncation to find interpolation bounds !  truncate interpolation between 0% and 0.40% Cu_int = int ( Cu * 100 ) if ( Cu_int < 0 ) then Cu_int = 0 else if ( Cu_int > 40 ) then Cu_int = 40 end if !Calculate indexes for nickel interpolation: !  multiply the Ni-% by 100 and take the integer truncation to find interpolation bounds !  truncate interpolation between 0% and 1.20% Ni_int = int ( Ni * 100 ) if ( Ni_int < 0 ) then Ni_int = 0 else if ( Ni_int > 120 ) then Ni_int = 120 end if !Nickel contents in CF_weld are at intervals of 0.20% nickel Ni_int = int ( Ni_int / 20 ) + 1 !Bi-linear interpolation if ( Cu <= 0.0 . or . Cu >= 0.40 ) then !only interpolate on nickel select case ( Ni_int ) case ( 7 ) CF = CF_weld ( Cu_int , Ni_int ) case default CF = CF_weld ( Cu_int , Ni_int ) + & ( Ni - 0.2 * ( Ni_int - 1 )) / 0.2 * ( CF_weld ( Cu_int , Ni_int + 1 ) - CF_weld ( Cu_int , Ni_int )) end select else !First, interpolate on copper select case ( Ni_int ) case ( 7 ) CF = CF_weld ( Cu_int , Ni_int ) + & ( Cu - 0.01 * ( Cu_int )) / 0.01 * ( CF_weld ( Cu_int + 1 , Ni_int ) - CF_weld ( Cu_int + 1 , Ni_int )) case default CF_1 = CF_weld ( Cu_int , Ni_int ) + & ( Cu - 0.01 * ( Cu_int )) / 0.01 * ( CF_weld ( Cu_int + 1 , Ni_int ) - CF_weld ( Cu_int + 1 , Ni_int )) CF_2 = CF_weld ( Cu_int , Ni_int + 1 ) + & ( Cu - 0.01 * ( Cu_int )) / 0.01 * ( CF_weld ( Cu_int + 1 , Ni_int + 1 ) - CF_weld ( Cu_int + 1 , Ni_int + 1 )) !Second, interpolate on nickel CF = CF_1 + ( Ni - 0.2 * ( Ni_int - 1 )) / 0.2 * ( CF_2 - CF_1 ) end select end if end function CF !This subroutine samples the copper and nickel contents based on the nominal value !and the standard deviation subroutine sample_chem ( Cu_ave , Ni_ave , Cu_sig , Ni_sig , Cu_local , Ni_local ) !Variables real , intent ( in ) :: Cu_ave , Ni_ave , Cu_sig , Ni_sig real , intent ( out ) :: Cu_local , Ni_local real :: u , Cu_bar , Cu_sig_star , Cu_sig_local !Sample local copper content based on weld copper sampling procedure Cu_bar = Cu_ave * Cu_sig Cu_sig_star = min ( 0.0718 * Cu_ave , 0.0185 ) call RANDOM_NUMBER ( u ) Cu_sig_local = Cu_bar + Cu_sig_star * sqrt ( 2.0 ) * erfc ( 2 * u - 1 ) call RANDOM_NUMBER ( u ) Cu_local = Cu_ave + Cu_sig_local * sqrt ( 2.0 ) * erfc ( 2 * u - 1 ) !Sample local nickel content based on weld nickel heat 34B009 & W5214 procedure call RANDOM_NUMBER ( u ) Ni_local = Ni_ave + Ni_sig * sqrt ( 2.0 ) * erfc ( 2 * u - 1 ) end subroutine sample_chem end module","tags":"","loc":"sourcefile/calc_rtndt.f90~2.html"},{"title":"Calc_cpi.f90 – miniFAVOR","text":"Files dependent on this one sourcefile~~calc_cpi.f90~2~~AfferentGraph sourcefile~calc_cpi.f90~2 Calc_cpi.f90 sourcefile~minifavor.f90~2 miniFAVOR.f90 sourcefile~minifavor.f90~2->sourcefile~calc_cpi.f90~2 sourcefile~whole_shebang_tests.f90 whole_shebang_tests.f90 sourcefile~whole_shebang_tests.f90->sourcefile~minifavor.f90~2 sourcefile~main.f90~2 main.f90 sourcefile~main.f90~2->sourcefile~whole_shebang_tests.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules reference_calc_cpi Source Code Calc_cpi.f90 Source Code module reference_calc_cpi implicit none contains !Function to calculate cpi(t) function cpi_t ( K , RTndt , T ) !Variables real :: cpi_t real , intent ( in ) :: K , RTndt , T real :: aKic , bKic , cKic !Calculate aKic, bKic, cKic aKic = 1 9.35 + 8.335 * exp ( 0.02254 * ( T - RTndt )) bKic = 1 5.61 + 5 0.132 * exp ( 0.008 * ( T - RTndt )) cKic = 4.0 !Calculate cpi_t if ( K < aKic ) then cpi_t = 0.0 else cpi_t = 1 - exp ( - (( K - aKic ) / bKic ) ** cKic ) end if end function cpi_t end module","tags":"","loc":"sourcefile/calc_cpi.f90~2.html"},{"title":"Calc_K.f90 – miniFAVOR","text":"This file depends on sourcefile~~calc_k.f90~2~~EfferentGraph sourcefile~calc_k.f90~2 Calc_K.f90 sourcefile~commons.f90~2 Commons.f90 sourcefile~calc_k.f90~2->sourcefile~commons.f90~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~calc_k.f90~2~~AfferentGraph sourcefile~calc_k.f90~2 Calc_K.f90 sourcefile~minifavor.f90~2 miniFAVOR.f90 sourcefile~minifavor.f90~2->sourcefile~calc_k.f90~2 sourcefile~whole_shebang_tests.f90 whole_shebang_tests.f90 sourcefile~whole_shebang_tests.f90->sourcefile~minifavor.f90~2 sourcefile~main.f90~2 main.f90 sourcefile~main.f90~2->sourcefile~whole_shebang_tests.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules reference_calc_k Source Code Calc_K.f90 Source Code module reference_calc_K implicit none contains !Function to calculate K(t) function Ki_t ( a , b , stress ) use reference_constants_h , only : Pi !Variables real :: Ki_t real , intent ( in ) :: a , b , stress !Calculate Ki_t Ki_t = stress * sqrt ( Pi * a ) * & ( 1.122 - 0.231 * ( a / b ) + 1 0.55 * ( a / b ) ** 2 - 2 1.71 * ( a / b ) ** 3 + 3 0.382 * ( a / b ) ** 4 ) end function Ki_t end module","tags":"","loc":"sourcefile/calc_k.f90~2.html"},{"title":"miniFAVOR.f90 – miniFAVOR","text":"PROGRAM: miniFAVOR PURPOSE:  Entry point for the console application. This file depends on sourcefile~~minifavor.f90~2~~EfferentGraph sourcefile~minifavor.f90~2 miniFAVOR.f90 sourcefile~commons.f90~2 Commons.f90 sourcefile~minifavor.f90~2->sourcefile~commons.f90~2 sourcefile~calc_k.f90~2 Calc_K.f90 sourcefile~minifavor.f90~2->sourcefile~calc_k.f90~2 sourcefile~calc_rtndt.f90~2 Calc_RTndt.f90 sourcefile~minifavor.f90~2->sourcefile~calc_rtndt.f90~2 sourcefile~calc_cpi.f90~2 Calc_cpi.f90 sourcefile~minifavor.f90~2->sourcefile~calc_cpi.f90~2 sourcefile~calc_k.f90~2->sourcefile~commons.f90~2 sourcefile~calc_rtndt.f90~2->sourcefile~commons.f90~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files dependent on this one sourcefile~~minifavor.f90~2~~AfferentGraph sourcefile~minifavor.f90~2 miniFAVOR.f90 sourcefile~whole_shebang_tests.f90 whole_shebang_tests.f90 sourcefile~whole_shebang_tests.f90->sourcefile~minifavor.f90~2 sourcefile~main.f90~2 main.f90 sourcefile~main.f90~2->sourcefile~whole_shebang_tests.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Modules reference_minifavor_m Source Code miniFAVOR.f90 Source Code !  miniFAVOR.f90 ! !  FUNCTIONS: !  miniFAVOR - Entry point of console application. ! !**************************************************************************** ! !  PROGRAM: miniFAVOR ! !  PURPOSE:  Entry point for the console application. ! !**************************************************************************** module reference_miniFAVOR_m contains subroutine reference_miniFAVOR use reference_inputs_h use reference_outputs_h use reference_calc_RTndt use reference_calc_K use reference_calc_cpi implicit none ! Variables integer :: i , j ! Body of miniFAVOR block integer i , num_seeds call random_seed ( size = num_seeds ) call random_seed ( put = [( i , i = 1 , num_seeds )]) end block !Allocate output arrays allocate ( K_hist ( ntime )) allocate ( Chemistry ( nsim , 3 )) allocate ( cpi_hist ( nsim , ntime )) allocate ( CPI_results ( nsim , 3 )) !Initialize output arrays K_hist = 0.0 Chemistry = 0.0 cpi_hist = 0.0 CPI_results = 0.0 !Calculate applied stress intensity factor (SIF) SIF_loop : do j = 1 , ntime K_hist ( j ) = Ki_t ( a , b , stress ( j )) end do SIF_loop !Start looping over number of simulations Vessel_loop : do i = 1 , nsim !Sample chemistry: Chemistry(i,1) is Cu content, Chemistry(i,2) is Ni content call sample_chem ( Cu_ave , Ni_ave , Cu_sig , Ni_sig , Chemistry ( i , 1 ), Chemistry ( i , 2 )) !Calculate chemistry factor: Chemistry(i,3) is chemistry factor Chemistry ( i , 3 ) = CF ( Chemistry ( i , 1 ), Chemistry ( i , 2 )) !Calculate RTndt for this vessel trial: CPI_results(i,1) is RTndt CPI_results ( i , 1 ) = RTndt ( a , Chemistry ( i , 3 ), fsurf , RTndt0 ) !Start time loop Time_loop : do j = 1 , ntime !Calculate instantaneous cpi(t) cpi_hist ( i , j ) = cpi_t ( K_hist ( j ), CPI_results ( i , 1 ), temp ( j )) end do Time_loop !Calculate CPI for vessel 'i' CPI_results ( i , 2 ) = maxval ( cpi_hist ( i ,:)) !Calculate moving average CPI for trials executed so far CPI_results ( i , 3 ) = sum ( CPI_results (:, 2 )) / i end do Vessel_loop end subroutine end module","tags":"","loc":"sourcefile/minifavor.f90~2.html"},{"title":"material_content_t – miniFAVOR ","text":"type, public :: material_content_t Elemental content Contents Variables cu_ ni_ Constructor material_content_t Type-Bound Procedures cu ni Components Type Visibility Attributes Name Initial real, private :: cu_ copper real, private :: ni_ nickel Constructor public interface material_content_t public elemental function sample_chem(cu_ave, ni_ave, cu_sig, ni_sig, samples) result(material_content) Arguments Type Intent Optional Attributes Name real, intent(in) :: cu_ave real, intent(in) :: ni_ave real, intent(in) :: cu_sig real, intent(in) :: ni_sig type(random_samples_t), intent(in) :: samples Return Value type( material_content_t ) Type-Bound Procedures procedure, public :: cu interface private elemental module function cu(self) result(my_cu) Implementation → Arguments Type Intent Optional Attributes Name class( material_content_t ), intent(in) :: self Return Value real procedure, public :: ni interface private elemental module function ni(self) result(my_ni) Implementation → Arguments Type Intent Optional Attributes Name class( material_content_t ), intent(in) :: self Return Value real","tags":"","loc":"type/material_content_t.html"},{"title":"detailed_output_t – miniFAVOR ","text":"type, public, extends( output_data_t ) :: detailed_output_t Inherits type~~detailed_output_t~~InheritsGraph type~detailed_output_t detailed_output_t type~output_data_t output_data_t type~detailed_output_t->type~output_data_t type~input_data_t input_data_t type~output_data_t->type~input_data_t input_data_ oracle_t oracle_t type~output_data_t->oracle_t Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\n    extends. Dashed arrows point from a derived type to the other\n    types it contains as a components, with a label listing the name(s) of\n    said component(s). Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Constructor detailed_output_t Type-Bound Procedures assign assignment(=) chemistry_content chemistry_factor cpi cpi_avg k_hist norm nsim ntime r_tndt subtract write_formatted Constructor public interface detailed_output_t public function new_detailed_output(output_data) Arguments Type Intent Optional Attributes Name type( output_data_t ), intent(in) :: output_data Return Value type( detailed_output_t ) Type-Bound Procedures procedure, public :: assign interface private module subroutine assign(self, rhs) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(inout) :: self class(oracle_t), intent(in) :: rhs generic, public :: assignment(=) => assign private interface assign () Arguments None procedure, public :: chemistry_content interface private module function chemistry_content(self) result(my_chemistry_content) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real,\n  allocatable, (:,:) procedure, public :: chemistry_factor interface private module function chemistry_factor(self) result(my_chemistry_factor) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real,\n  allocatable, (:) procedure, public :: cpi interface private module function cpi(self) result(my_cpi) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real,\n  allocatable, (:) procedure, public :: cpi_avg interface private module function cpi_avg(self) result(my_cpi_avg) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real,\n  allocatable, (:) procedure, public :: k_hist interface private module function k_hist(self) result(my_k_hist) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real,\n  allocatable, (:) procedure, public :: norm interface private pure module function norm(self) result(norm_of_self) Implementation → result is a norm of the array formed by concatenating the real components of self object Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real procedure, public :: nsim interface private module function nsim(self) result(my_nsim) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value integer procedure, public :: ntime interface private module function ntime(self) result(my_ntime) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value integer procedure, public :: r_tndt interface private module function r_tndt(self) result(my_r_tndt) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real,\n  allocatable, (:) procedure, public :: subtract interface private module function subtract(self, rhs) result(difference) Implementation → result has components corresponding to subtracting rhs's components fron self object's components Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self class(oracle_t), intent(in) :: rhs Return Value class(oracle_t),\n  allocatable procedure, public :: write_formatted interface private module subroutine write_formatted(self, unit, iotype, v_list, iostat, iomsg) Implementation → Arguments Type Intent Optional Attributes Name class( detailed_output_t ), intent(in) :: self integer, intent(in) :: unit character(len=*), intent(in) :: iotype integer, intent(in) :: v_list (:) integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg","tags":"","loc":"type/detailed_output_t.html"},{"title":"output_data_t – miniFAVOR ","text":"type, public, extends(oracle_t) :: output_data_t Inherits type~~output_data_t~~InheritsGraph type~output_data_t output_data_t type~input_data_t input_data_t type~output_data_t->type~input_data_t input_data_ oracle_t oracle_t type~output_data_t->oracle_t Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\n    extends. Dashed arrows point from a derived type to the other\n    types it contains as a components, with a label listing the name(s) of\n    said component(s). Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Inherited by type~~output_data_t~~InheritedByGraph type~output_data_t output_data_t type~detailed_output_t detailed_output_t type~detailed_output_t->type~output_data_t Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\n    extends. Dashed arrows point from a derived type to the other\n    types it contains as a components, with a label listing the name(s) of\n    said component(s). Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables chemistry_content_ chemistry_factor_ cpi_ cpi_avg_ input_data_ k_hist_ r_tndt_ Constructor output_data_t Type-Bound Procedures assign assignment(=) chemistry_content chemistry_factor cpi cpi_avg k_hist norm nsim ntime r_tndt subtract write_formatted Components Type Visibility Attributes Name Initial real, private, allocatable :: chemistry_content_ (:,:) real, private, allocatable :: chemistry_factor_ (:) real, private, allocatable :: cpi_ (:) real, private, allocatable :: cpi_avg_ (:) type( input_data_t ), private :: input_data_ real, private, allocatable :: k_hist_ (:) real, private, allocatable :: r_tndt_ (:) Constructor public interface output_data_t public pure function default_constructor() result(new_output_data_t) Arguments None Return Value type( output_data_t ) public pure function new_output_data(input_data, r_tndt, k_hist, chemistry_content, chemistry_factor, cpi, cpi_avg) Arguments Type Intent Optional Attributes Name type( input_data_t ), intent(in) :: input_data real, intent(in) :: r_tndt (:) real, intent(in) :: k_hist (:) real, intent(in) :: chemistry_content (:,:) real, intent(in) :: chemistry_factor (:) real, intent(in) :: cpi (:) real, intent(in) :: cpi_avg (:) Return Value type( output_data_t ) public function whole_shebang(input_data, random_samples) result(new_output_data) Arguments Type Intent Optional Attributes Name type( input_data_t ), intent(in) :: input_data type( random_samples_t ), intent(in) :: random_samples (:) Return Value type( output_data_t ) Type-Bound Procedures procedure, public :: assign interface private module subroutine assign(self, rhs) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(inout) :: self class(oracle_t), intent(in) :: rhs generic, public :: assignment(=) => assign private interface assign () Arguments None procedure, public :: chemistry_content interface private module function chemistry_content(self) result(my_chemistry_content) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real,\n  allocatable, (:,:) procedure, public :: chemistry_factor interface private module function chemistry_factor(self) result(my_chemistry_factor) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real,\n  allocatable, (:) procedure, public :: cpi interface private module function cpi(self) result(my_cpi) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real,\n  allocatable, (:) procedure, public :: cpi_avg interface private module function cpi_avg(self) result(my_cpi_avg) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real,\n  allocatable, (:) procedure, public :: k_hist interface private module function k_hist(self) result(my_k_hist) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real,\n  allocatable, (:) procedure, public :: norm interface private pure module function norm(self) result(norm_of_self) Implementation → result is a norm of the array formed by concatenating the real components of self object Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real procedure, public :: nsim interface private module function nsim(self) result(my_nsim) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value integer procedure, public :: ntime interface private module function ntime(self) result(my_ntime) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value integer procedure, public :: r_tndt interface private module function r_tndt(self) result(my_r_tndt) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real,\n  allocatable, (:) procedure, public :: subtract interface private module function subtract(self, rhs) result(difference) Implementation → result has components corresponding to subtracting rhs's components fron self object's components Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self class(oracle_t), intent(in) :: rhs Return Value class(oracle_t),\n  allocatable procedure, public :: write_formatted interface private module subroutine write_formatted(self, unit, iotype, v_list, iostat, iomsg) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self integer, intent(in) :: unit character(len=*), intent(in) :: iotype integer, intent(in) :: v_list (:) integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg","tags":"","loc":"type/output_data_t.html"},{"title":"input_data_t – miniFAVOR ","text":"type, public :: input_data_t Inherited by type~~input_data_t~~InheritedByGraph type~input_data_t input_data_t type~output_data_t output_data_t type~output_data_t->type~input_data_t input_data_ type~detailed_output_t detailed_output_t type~detailed_output_t->type~output_data_t Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\n    extends. Dashed arrows point from a derived type to the other\n    types it contains as a components, with a label listing the name(s) of\n    said component(s). Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables a_ b_ cu_ave_ cu_sig_ details_ fsurf_ ni_ave_ ni_sig_ nsim_ ntime_ rtndt0_ stress_ temp_ Constructor input_data_t Type-Bound Procedures a assign assignment(=) b broadcast cu_ave cu_sig define details fsurf ni_ave ni_sig norm nsim ntime operator(-) rtndt0 stress subtract temp Components Type Visibility Attributes Name Initial real, private :: a_ real, private :: b_ real, private :: cu_ave_ real, private :: cu_sig_ logical, private :: details_ real, private :: fsurf_ real, private :: ni_ave_ real, private :: ni_sig_ integer, private :: nsim_ integer, private :: ntime_ real, private :: rtndt0_ real, private, allocatable, dimension(:) :: stress_ real, private, allocatable, dimension(:) :: temp_ Constructor public interface input_data_t public pure function default_input_data_t() result(new_input_data_t) Arguments None Return Value type( input_data_t ) Type-Bound Procedures procedure, public :: a interface private pure module function a(self) result(self_a) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real procedure, public :: assign interface private pure module subroutine assign(lhs, rhs) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(inout) :: lhs type( input_data_t ), intent(in) :: rhs generic, public :: assignment(=) => assign private interface assign () Arguments None procedure, public :: b interface private pure module function b(self) result(self_b) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real procedure, public :: broadcast interface private module subroutine broadcast(self, source_image) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(inout) :: self integer, intent(in) :: source_image procedure, public :: cu_ave interface private pure module function cu_ave(self) result(self_cu_ave) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real procedure, public :: cu_sig interface private pure module function cu_sig(self) result(self_cu_sig) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real procedure, public :: define interface private module subroutine define(self, fn_in) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(out) :: self character(len=*), intent(in) :: fn_in procedure, public :: details interface private pure module function details(self) result(self_details) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value logical procedure, public :: fsurf interface private pure module function fsurf(self) result(self_fsurf) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real procedure, public :: ni_ave interface private pure module function ni_ave(self) result(self_ni_ave) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real procedure, public :: ni_sig interface private pure module function ni_sig(self) result(self_ni_sig) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real procedure, public :: norm interface private pure module function norm(self) result(norm_of_self) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real procedure, public :: nsim interface private pure module function nsim(self) result(self_nsim) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value integer procedure, public :: ntime interface private pure module function ntime(self) result(self_ntime) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value integer generic, public :: operator(-) => subtract private interface subtract () Arguments None procedure, public :: rtndt0 interface private pure module function rtndt0(self) result(self_rtndt0) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real procedure, public :: stress interface private pure module function stress(self) result(self_stress) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real,\n  allocatable, (:) procedure, public :: subtract interface private pure module function subtract(self, rhs) result(difference) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self type( input_data_t ), intent(in) :: rhs Return Value type( input_data_t ) procedure, public :: temp interface private pure module function temp(self) result(self_temp) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real,\n  allocatable, (:)","tags":"","loc":"type/input_data_t.html"},{"title":"random_samples_t – miniFAVOR ","text":"type, public, extends(object_t) :: random_samples_t Inherits type~~random_samples_t~~InheritsGraph type~random_samples_t random_samples_t object_t object_t type~random_samples_t->object_t Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\n    extends. Dashed arrows point from a derived type to the other\n    types it contains as a components, with a label listing the name(s) of\n    said component(s). Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables cu_local_ cu_sig_local_ ni_local_ phi_ Type-Bound Procedures cu_local cu_sig_local define ni_local phi write_formatted Components Type Visibility Attributes Name Initial real, private :: cu_local_ real, private :: cu_sig_local_ real, private :: ni_local_ real, private :: phi_ Type-Bound Procedures procedure, public :: cu_local interface private pure module function cu_local(self) result(self_cu_local) Implementation → Arguments Type Intent Optional Attributes Name class( random_samples_t ), intent(in) :: self Return Value real procedure, public :: cu_sig_local interface private pure module function cu_sig_local(self) result(self_cu_sig_local) Implementation → Arguments Type Intent Optional Attributes Name class( random_samples_t ), intent(in) :: self Return Value real procedure, public :: define interface private module subroutine define(self) Implementation → Arguments Type Intent Optional Attributes Name class( random_samples_t ), intent(out) :: self procedure, public :: ni_local interface private pure module function ni_local(self) result(self_ni_local) Implementation → Arguments Type Intent Optional Attributes Name class( random_samples_t ), intent(in) :: self Return Value real procedure, public :: phi interface private elemental module function phi(self) result(self_phi) Implementation → Arguments Type Intent Optional Attributes Name class( random_samples_t ), intent(in) :: self Return Value real procedure, public :: write_formatted interface private module subroutine write_formatted(self, unit, iotype, v_list, iostat, iomsg) Implementation → Arguments Type Intent Optional Attributes Name class( random_samples_t ), intent(in) :: self integer, intent(in) :: unit character(len=*), intent(in) :: iotype integer, intent(in) :: v_list (:) integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg","tags":"","loc":"type/random_samples_t.html"},{"title":"gather – miniFAVOR","text":"interface Calls interface~~gather~~CallsGraph interface~gather gather proc~gather gather interface~gather->proc~gather Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by interface~~gather~~CalledByGraph interface~gather gather proc~whole_shebang whole_shebang proc~whole_shebang->interface~gather Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. public module subroutine gather(material_content, data_partition, dim) Implementation → Arguments Type Intent Optional Attributes Name type( material_content_t ), intent(inout) :: material_content (:) type(data_partition_t), intent(in) :: data_partition integer, optional :: dim","tags":"","loc":"interface/gather.html"},{"title":"material_content_t – miniFAVOR","text":"public interface material_content_t Called by interface~~material_content_t~~CalledByGraph interface~material_content_t material_content_t proc~sample_chem~2 sample_chem proc~sample_chem~2->interface~material_content_t Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Functions sample_chem Functions public elemental function sample_chem(cu_ave, ni_ave, cu_sig, ni_sig, samples) result(material_content) Arguments Type Intent Optional Attributes Name real, intent(in) :: cu_ave real, intent(in) :: ni_ave real, intent(in) :: cu_sig real, intent(in) :: ni_sig type(random_samples_t), intent(in) :: samples Return Value type( material_content_t )","tags":"","loc":"interface/material_content_t.html"},{"title":"cu – miniFAVOR","text":"interface Calls interface~~cu~~CallsGraph interface~cu cu proc~cu cu interface~cu->proc~cu Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private elemental module function cu(self) result(my_cu) Implementation → Arguments Type Intent Optional Attributes Name class( material_content_t ), intent(in) :: self Return Value real","tags":"","loc":"interface/cu.html"},{"title":"ni – miniFAVOR","text":"interface Calls interface~~ni~~CallsGraph interface~ni ni proc~ni ni interface~ni->proc~ni Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private elemental module function ni(self) result(my_ni) Implementation → Arguments Type Intent Optional Attributes Name class( material_content_t ), intent(in) :: self Return Value real","tags":"","loc":"interface/ni.html"},{"title":"write_formatted – miniFAVOR","text":"interface Calls interface~~write_formatted~~CallsGraph interface~write_formatted write_formatted proc~write_formatted write_formatted interface~write_formatted->proc~write_formatted assert assert proc~write_formatted->assert Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private module subroutine write_formatted(self, unit, iotype, v_list, iostat, iomsg) Implementation → Arguments Type Intent Optional Attributes Name class( material_content_t ), intent(in) :: self integer, intent(in) :: unit character(len=*), intent(in) :: iotype integer, intent(in) :: v_list (:) integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg","tags":"","loc":"interface/write_formatted.html"},{"title":"broadcast_components – miniFAVOR","text":"subroutine broadcast_components() Arguments None Called by proc~~broadcast_components~~CalledByGraph proc~broadcast_components broadcast_components proc~broadcast broadcast proc~broadcast->proc~broadcast_components interface~broadcast broadcast interface~broadcast->proc~broadcast Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/broadcast_components.html"},{"title":"cf – miniFAVOR","text":"public elemental function cf(cu, ni) Uses constants_h proc~~cf~~UsesGraph proc~cf cf module~constants_h constants_h proc~cf->module~constants_h Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Arguments Type Intent Optional Attributes Name real, intent(in) :: cu real, intent(in) :: ni Return Value real Called by proc~~cf~~CalledByGraph proc~cf cf proc~whole_shebang whole_shebang proc~whole_shebang->proc~cf Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code cf Source Code elemental function RTndt ( a , CF , fsurf , RTndt0 , phi ) real :: RTndt real , intent ( in ) :: a , CF , fsurf , RTndt0 , phi associate ( & D_RTepi => - 2 9.5 + 7 8.0 * ( - log ( 1 - phi )) ** ( 1 / 1.73 ), & f => fsurf * exp ( - 0.24 * a ) & ) associate ( D_RTndt => CF * f ** ( 0.28 - 0.10 * log10 ( f ))) RTndt = RTndt0 + D_RTepi + D_RTndt end associate end associate end function RTndt !This function calculates the weld chemistry factor given the copper and nickel contents elemental function CF ( Cu , Ni ) use constants_h , only : CF_weld real :: CF real , intent ( in ) :: Cu , Ni truncate_and_interpolate : & associate ( & Cu_int => rounded_and_bounded ( Cu * 100 , bounds = [ 0 , 40 ]), & Ni_int => int ( rounded_and_bounded ( Ni * 100 , bounds = [ 0 , 120 ]) / 20 ) + 1 & ! Nickel contents in CF_weld are at intervals of 0.20% ) !Bi-linear interpolation if ( Cu <= 0.0 . or . Cu >= 0.40 ) then !only interpolate on nickel select case ( Ni_int ) case ( 7 ) CF = CF_weld ( Cu_int , Ni_int ) case default CF = CF_weld ( Cu_int , Ni_int ) + & ( Ni - 0.2 * ( Ni_int - 1 )) / 0.2 * ( CF_weld ( Cu_int , Ni_int + 1 ) - CF_weld ( Cu_int , Ni_int )) end select else !First, interpolate on copper select case ( Ni_int ) case ( 7 ) CF = CF_weld ( Cu_int , Ni_int ) + & ( Cu - 0.01 * ( Cu_int )) / 0.01 * ( CF_weld ( Cu_int + 1 , Ni_int ) - CF_weld ( Cu_int + 1 , Ni_int )) case default associate ( & CF_1 => CF_weld ( Cu_int , Ni_int ) + ( Cu - 0.01 * ( Cu_int )) / 0.01 * ( CF_weld ( Cu_int + 1 , Ni_int ) - CF_weld ( Cu_int + 1 , Ni_int )), & CF_2 => CF_weld ( Cu_int , Ni_int + 1 ) + ( Cu - 0.01 * ( Cu_int )) / 0.01 * ( CF_weld ( Cu_int + 1 , Ni_int + 1 ) - CF_weld ( Cu_int + 1 , Ni_int + 1 )) & ) !Second, interpolate on nickel CF = CF_1 + ( Ni - 0.2 * ( Ni_int - 1 )) / 0.2 * ( CF_2 - CF_1 ) end associate end select end if end associate truncate_and_interpolate contains pure function rounded_and_bounded ( unbounded_value , bounds ) integer rounded_and_bounded real , intent ( in ) :: unbounded_value integer , intent ( in ) :: bounds (:) integer , parameter :: end_points = 2 call assert ( size ( bounds ) == end_points , \"Calc_RTndt|bounded_value: size(bounds)==end_points\" ) associate ( floor_ => bounds ( 1 ), ceiling_ => bounds ( 2 )) if ( unbounded_value < floor_ ) then rounded_and_bounded = floor_ else if ( unbounded_value > ceiling_ ) then rounded_and_bounded = ceiling_ else rounded_and_bounded = int ( unbounded_value ) end if end associate end function end function CF","tags":"","loc":"proc/cf.html"},{"title":"rtndt – miniFAVOR","text":"public elemental function rtndt(a, cf, fsurf, rtndt0, phi) Arguments Type Intent Optional Attributes Name real, intent(in) :: a real, intent(in) :: cf real, intent(in) :: fsurf real, intent(in) :: rtndt0 real, intent(in) :: phi Return Value real Called by proc~~rtndt~~CalledByGraph proc~rtndt rtndt proc~whole_shebang whole_shebang proc~whole_shebang->proc~rtndt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code rtndt Source Code elemental function RTndt ( a , CF , fsurf , RTndt0 , phi ) real :: RTndt real , intent ( in ) :: a , CF , fsurf , RTndt0 , phi associate ( & D_RTepi => - 2 9.5 + 7 8.0 * ( - log ( 1 - phi )) ** ( 1 / 1.73 ), & f => fsurf * exp ( - 0.24 * a ) & ) associate ( D_RTndt => CF * f ** ( 0.28 - 0.10 * log10 ( f ))) RTndt = RTndt0 + D_RTepi + D_RTndt end associate end associate end function RTndt","tags":"","loc":"proc/rtndt.html"},{"title":"detailed_output_t – miniFAVOR","text":"public interface detailed_output_t Contents Functions new_detailed_output Functions public function new_detailed_output(output_data) Arguments Type Intent Optional Attributes Name type( output_data_t ), intent(in) :: output_data Return Value type( detailed_output_t )","tags":"","loc":"interface/detailed_output_t.html"},{"title":"write_formatted – miniFAVOR","text":"interface Calls interface~~write_formatted~2~~CallsGraph interface~write_formatted~2 write_formatted proc~write_formatted~2 write_formatted interface~write_formatted~2->proc~write_formatted~2 k_hist k_hist proc~write_formatted~2->k_hist r_tndt r_tndt proc~write_formatted~2->r_tndt cpi_avg cpi_avg proc~write_formatted~2->cpi_avg cpi cpi proc~write_formatted~2->cpi chemistry_factor chemistry_factor proc~write_formatted~2->chemistry_factor chemistry_content chemistry_content proc~write_formatted~2->chemistry_content Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private module subroutine write_formatted(self, unit, iotype, v_list, iostat, iomsg) Implementation → Arguments Type Intent Optional Attributes Name class( detailed_output_t ), intent(in) :: self integer, intent(in) :: unit character(len=*), intent(in) :: iotype integer, intent(in) :: v_list (:) integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg","tags":"","loc":"interface/write_formatted~2.html"},{"title":"cpi_t – miniFAVOR","text":"public pure function cpi_t(k, rtndt, t) Arguments Type Intent Optional Attributes Name real, intent(in) :: k real, intent(in) :: rtndt real, intent(in) :: t Return Value real Called by proc~~cpi_t~~CalledByGraph proc~cpi_t cpi_t proc~whole_shebang whole_shebang proc~whole_shebang->proc~cpi_t Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code cpi_t Source Code pure function cpi_t ( K , RTndt , T ) real :: cpi_t real , intent ( in ) :: K , RTndt , T real , parameter :: cKic = 4.0 associate ( & aKic => 1 9.35 + 8.335 * exp ( 0.02254 * ( T - RTndt )), & bKic => 1 5.61 + 5 0.132 * exp ( 0.008 * ( T - RTndt )) & ) cpi_t = merge ( 0.0 , 1 - exp ( - (( K - aKic ) / bKic ) ** cKic ), K < aKic ) end associate end function cpi_t","tags":"","loc":"proc/cpi_t.html"},{"title":"output_data_t – miniFAVOR","text":"public interface output_data_t Called by interface~~output_data_t~~CalledByGraph interface~output_data_t output_data_t proc~whole_shebang whole_shebang proc~whole_shebang->interface~output_data_t Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Functions default_constructor new_output_data whole_shebang Functions public pure function default_constructor() result(new_output_data_t) Arguments None Return Value type( output_data_t ) public pure function new_output_data(input_data, r_tndt, k_hist, chemistry_content, chemistry_factor, cpi, cpi_avg) Arguments Type Intent Optional Attributes Name type( input_data_t ), intent(in) :: input_data real, intent(in) :: r_tndt (:) real, intent(in) :: k_hist (:) real, intent(in) :: chemistry_content (:,:) real, intent(in) :: chemistry_factor (:) real, intent(in) :: cpi (:) real, intent(in) :: cpi_avg (:) Return Value type( output_data_t ) public function whole_shebang(input_data, random_samples) result(new_output_data) Arguments Type Intent Optional Attributes Name type( input_data_t ), intent(in) :: input_data type( random_samples_t ), intent(in) :: random_samples (:) Return Value type( output_data_t )","tags":"","loc":"interface/output_data_t.html"},{"title":"assign – miniFAVOR","text":"interface Calls interface~~assign~~CallsGraph interface~assign assign proc~assign assign interface~assign->proc~assign Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private module subroutine assign(self, rhs) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(inout) :: self class(oracle_t), intent(in) :: rhs","tags":"","loc":"interface/assign.html"},{"title":"chemistry_content – miniFAVOR","text":"interface Calls interface~~chemistry_content~~CallsGraph interface~chemistry_content chemistry_content proc~chemistry_content chemistry_content interface~chemistry_content->proc~chemistry_content Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private module function chemistry_content(self) result(my_chemistry_content) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real,\n  allocatable,(:,:)","tags":"","loc":"interface/chemistry_content.html"},{"title":"chemistry_factor – miniFAVOR","text":"interface Calls interface~~chemistry_factor~~CallsGraph interface~chemistry_factor chemistry_factor proc~chemistry_factor chemistry_factor interface~chemistry_factor->proc~chemistry_factor Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private module function chemistry_factor(self) result(my_chemistry_factor) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real,\n  allocatable,(:)","tags":"","loc":"interface/chemistry_factor.html"},{"title":"cpi – miniFAVOR","text":"interface Calls interface~~cpi~~CallsGraph interface~cpi cpi proc~cpi cpi interface~cpi->proc~cpi Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private module function cpi(self) result(my_cpi) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real,\n  allocatable,(:)","tags":"","loc":"interface/cpi.html"},{"title":"cpi_avg – miniFAVOR","text":"interface Calls interface~~cpi_avg~~CallsGraph interface~cpi_avg cpi_avg proc~cpi_avg cpi_avg interface~cpi_avg->proc~cpi_avg Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private module function cpi_avg(self) result(my_cpi_avg) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real,\n  allocatable,(:)","tags":"","loc":"interface/cpi_avg.html"},{"title":"k_hist – miniFAVOR","text":"interface Calls interface~~k_hist~~CallsGraph interface~k_hist k_hist proc~k_hist k_hist interface~k_hist->proc~k_hist Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by interface~~k_hist~~CalledByGraph interface~k_hist k_hist proc~whole_shebang whole_shebang proc~whole_shebang->interface~k_hist Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private module function k_hist(self) result(my_k_hist) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real,\n  allocatable,(:)","tags":"","loc":"interface/k_hist.html"},{"title":"norm – miniFAVOR","text":"interface Calls interface~~norm~~CallsGraph interface~norm norm proc~norm norm interface~norm->proc~norm Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private pure module function norm(self) result(norm_of_self) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real Description result is a norm of the array formed by concatenating the real components of self object","tags":"","loc":"interface/norm.html"},{"title":"nsim – miniFAVOR","text":"interface Calls interface~~nsim~~CallsGraph interface~nsim nsim proc~nsim nsim interface~nsim->proc~nsim Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private module function nsim(self) result(my_nsim) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value integer","tags":"","loc":"interface/nsim.html"},{"title":"ntime – miniFAVOR","text":"interface Calls interface~~ntime~~CallsGraph interface~ntime ntime proc~ntime ntime interface~ntime->proc~ntime Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private module function ntime(self) result(my_ntime) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value integer","tags":"","loc":"interface/ntime.html"},{"title":"r_tndt – miniFAVOR","text":"interface Calls interface~~r_tndt~~CallsGraph interface~r_tndt r_tndt proc~r_tndt r_tndt interface~r_tndt->proc~r_tndt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private module function r_tndt(self) result(my_r_tndt) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real,\n  allocatable,(:)","tags":"","loc":"interface/r_tndt.html"},{"title":"subtract – miniFAVOR","text":"interface Calls interface~~subtract~~CallsGraph interface~subtract subtract proc~subtract subtract interface~subtract->proc~subtract Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private module function subtract(self, rhs) result(difference) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self class(oracle_t), intent(in) :: rhs Return Value class(oracle_t),\n  allocatable Description result has components corresponding to subtracting rhs's components fron self object's components","tags":"","loc":"interface/subtract.html"},{"title":"write_formatted – miniFAVOR","text":"interface Calls interface~~write_formatted~3~~CallsGraph interface~write_formatted~3 write_formatted proc~write_formatted~3 write_formatted interface~write_formatted~3->proc~write_formatted~3 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private module subroutine write_formatted(self, unit, iotype, v_list, iostat, iomsg) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self integer, intent(in) :: unit character(len=*), intent(in) :: iotype integer, intent(in) :: v_list (:) integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg","tags":"","loc":"interface/write_formatted~3.html"},{"title":"ki_t – miniFAVOR","text":"public elemental function ki_t(a, b, stress) Uses constants_h proc~~ki_t~~UsesGraph proc~ki_t ki_t module~constants_h constants_h proc~ki_t->module~constants_h Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Arguments Type Intent Optional Attributes Name real, intent(in) :: a real, intent(in) :: b real, intent(in) :: stress Return Value real Contents Source Code ki_t Source Code elemental function Ki_t ( a , b , stress ) use constants_h , only : Pi !Variables real :: Ki_t real , intent ( in ) :: a , b , stress !Calculate Ki_t Ki_t = stress * sqrt ( Pi * a ) * & ( 1.122 - 0.231 * ( a / b ) + 1 0.55 * ( a / b ) ** 2 - 2 1.71 * ( a / b ) ** 3 + 3 0.382 * ( a / b ) ** 4 ) end function Ki_t","tags":"","loc":"proc/ki_t.html"},{"title":"input_data_t – miniFAVOR","text":"public interface input_data_t Contents Functions default_input_data_t Functions public pure function default_input_data_t() result(new_input_data_t) Arguments None Return Value type( input_data_t )","tags":"","loc":"interface/input_data_t.html"},{"title":"a – miniFAVOR","text":"interface Calls interface~~a~~CallsGraph interface~a a proc~a a interface~a->proc~a Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private pure module function a(self) result(self_a) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real","tags":"","loc":"interface/a.html"},{"title":"assign – miniFAVOR","text":"interface Calls interface~~assign~2~~CallsGraph interface~assign~2 assign proc~assign~2 assign interface~assign~2->proc~assign~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private pure module subroutine assign(lhs, rhs) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(inout) :: lhs type( input_data_t ), intent(in) :: rhs","tags":"","loc":"interface/assign~2.html"},{"title":"b – miniFAVOR","text":"interface Calls interface~~b~~CallsGraph interface~b b proc~b b interface~b->proc~b Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private pure module function b(self) result(self_b) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real","tags":"","loc":"interface/b.html"},{"title":"broadcast – miniFAVOR","text":"interface Calls interface~~broadcast~~CallsGraph interface~broadcast broadcast proc~broadcast broadcast interface~broadcast->proc~broadcast proc~broadcast_components broadcast_components proc~broadcast->proc~broadcast_components Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private module subroutine broadcast(self, source_image) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(inout) :: self integer, intent(in) :: source_image","tags":"","loc":"interface/broadcast.html"},{"title":"cu_ave – miniFAVOR","text":"interface Calls interface~~cu_ave~~CallsGraph interface~cu_ave cu_ave proc~cu_ave cu_ave interface~cu_ave->proc~cu_ave Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private pure module function cu_ave(self) result(self_cu_ave) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real","tags":"","loc":"interface/cu_ave.html"},{"title":"cu_sig – miniFAVOR","text":"interface Calls interface~~cu_sig~~CallsGraph interface~cu_sig cu_sig proc~cu_sig cu_sig interface~cu_sig->proc~cu_sig Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private pure module function cu_sig(self) result(self_cu_sig) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real","tags":"","loc":"interface/cu_sig.html"},{"title":"define – miniFAVOR","text":"interface Calls interface~~define~~CallsGraph interface~define define proc~define define interface~define->proc~define Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private module subroutine define(self, fn_in) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(out) :: self character(len=*), intent(in) :: fn_in","tags":"","loc":"interface/define.html"},{"title":"details – miniFAVOR","text":"interface Calls interface~~details~~CallsGraph interface~details details proc~details details interface~details->proc~details Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private pure module function details(self) result(self_details) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value logical","tags":"","loc":"interface/details.html"},{"title":"fsurf – miniFAVOR","text":"interface Calls interface~~fsurf~~CallsGraph interface~fsurf fsurf proc~fsurf fsurf interface~fsurf->proc~fsurf Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private pure module function fsurf(self) result(self_fsurf) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real","tags":"","loc":"interface/fsurf.html"},{"title":"ni_ave – miniFAVOR","text":"interface Calls interface~~ni_ave~~CallsGraph interface~ni_ave ni_ave proc~ni_ave ni_ave interface~ni_ave->proc~ni_ave Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private pure module function ni_ave(self) result(self_ni_ave) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real","tags":"","loc":"interface/ni_ave.html"},{"title":"ni_sig – miniFAVOR","text":"interface Calls interface~~ni_sig~~CallsGraph interface~ni_sig ni_sig proc~ni_sig ni_sig interface~ni_sig->proc~ni_sig Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private pure module function ni_sig(self) result(self_ni_sig) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real","tags":"","loc":"interface/ni_sig.html"},{"title":"norm – miniFAVOR","text":"interface Calls interface~~norm~2~~CallsGraph interface~norm~2 norm proc~norm~2 norm interface~norm~2->proc~norm~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private pure module function norm(self) result(norm_of_self) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real","tags":"","loc":"interface/norm~2.html"},{"title":"nsim – miniFAVOR","text":"interface Calls interface~~nsim~2~~CallsGraph interface~nsim~2 nsim proc~nsim~2 nsim interface~nsim~2->proc~nsim~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private pure module function nsim(self) result(self_nsim) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value integer","tags":"","loc":"interface/nsim~2.html"},{"title":"ntime – miniFAVOR","text":"interface Calls interface~~ntime~2~~CallsGraph interface~ntime~2 ntime proc~ntime~2 ntime interface~ntime~2->proc~ntime~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private pure module function ntime(self) result(self_ntime) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value integer","tags":"","loc":"interface/ntime~2.html"},{"title":"rtndt0 – miniFAVOR","text":"interface Calls interface~~rtndt0~~CallsGraph interface~rtndt0 rtndt0 proc~rtndt0 rtndt0 interface~rtndt0->proc~rtndt0 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private pure module function rtndt0(self) result(self_rtndt0) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real","tags":"","loc":"interface/rtndt0.html"},{"title":"stress – miniFAVOR","text":"interface Calls interface~~stress~~CallsGraph interface~stress stress proc~stress stress interface~stress->proc~stress Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private pure module function stress(self) result(self_stress) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real,\n  allocatable,(:)","tags":"","loc":"interface/stress.html"},{"title":"subtract – miniFAVOR","text":"interface Calls interface~~subtract~2~~CallsGraph interface~subtract~2 subtract proc~subtract~2 subtract interface~subtract~2->proc~subtract~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private pure module function subtract(self, rhs) result(difference) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self type( input_data_t ), intent(in) :: rhs Return Value type( input_data_t )","tags":"","loc":"interface/subtract~2.html"},{"title":"temp – miniFAVOR","text":"interface Calls interface~~temp~~CallsGraph interface~temp temp proc~temp temp interface~temp->proc~temp Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private pure module function temp(self) result(self_temp) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real,\n  allocatable,(:)","tags":"","loc":"interface/temp.html"},{"title":"cu_local – miniFAVOR","text":"interface Calls interface~~cu_local~~CallsGraph interface~cu_local cu_local proc~cu_local cu_local interface~cu_local->proc~cu_local Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private pure module function cu_local(self) result(self_cu_local) Implementation → Arguments Type Intent Optional Attributes Name class( random_samples_t ), intent(in) :: self Return Value real","tags":"","loc":"interface/cu_local.html"},{"title":"cu_sig_local – miniFAVOR","text":"interface Calls interface~~cu_sig_local~~CallsGraph interface~cu_sig_local cu_sig_local proc~cu_sig_local cu_sig_local interface~cu_sig_local->proc~cu_sig_local Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private pure module function cu_sig_local(self) result(self_cu_sig_local) Implementation → Arguments Type Intent Optional Attributes Name class( random_samples_t ), intent(in) :: self Return Value real","tags":"","loc":"interface/cu_sig_local.html"},{"title":"define – miniFAVOR","text":"interface Calls interface~~define~2~~CallsGraph interface~define~2 define proc~define~2 define interface~define~2->proc~define~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private module subroutine define(self) Implementation → Arguments Type Intent Optional Attributes Name class( random_samples_t ), intent(out) :: self","tags":"","loc":"interface/define~2.html"},{"title":"ni_local – miniFAVOR","text":"interface Calls interface~~ni_local~~CallsGraph interface~ni_local ni_local proc~ni_local ni_local interface~ni_local->proc~ni_local Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private pure module function ni_local(self) result(self_ni_local) Implementation → Arguments Type Intent Optional Attributes Name class( random_samples_t ), intent(in) :: self Return Value real","tags":"","loc":"interface/ni_local.html"},{"title":"phi – miniFAVOR","text":"interface Calls interface~~phi~~CallsGraph interface~phi phi proc~phi phi interface~phi->proc~phi Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private elemental module function phi(self) result(self_phi) Implementation → Arguments Type Intent Optional Attributes Name class( random_samples_t ), intent(in) :: self Return Value real","tags":"","loc":"interface/phi.html"},{"title":"write_formatted – miniFAVOR","text":"interface Calls interface~~write_formatted~4~~CallsGraph interface~write_formatted~4 write_formatted proc~write_formatted~4 write_formatted interface~write_formatted~4->proc~write_formatted~4 assert assert proc~write_formatted~4->assert Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private module subroutine write_formatted(self, unit, iotype, v_list, iostat, iomsg) Implementation → Arguments Type Intent Optional Attributes Name class( random_samples_t ), intent(in) :: self integer, intent(in) :: unit character(len=*), intent(in) :: iotype integer, intent(in) :: v_list (:) integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg","tags":"","loc":"interface/write_formatted~4.html"},{"title":"check_norm_of_difference – miniFAVOR","text":"public function check_norm_of_difference() result(result_) Arguments None Return Value type(result_t) Calls proc~~check_norm_of_difference~~CallsGraph proc~check_norm_of_difference check_norm_of_difference assert_equals assert_equals proc~check_norm_of_difference->assert_equals Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/check_norm_of_difference.html"},{"title":"test_output_data – miniFAVOR","text":"public function test_output_data() result(test_item) Arguments None Return Value type(test_item_t) Calls proc~~test_output_data~~CallsGraph proc~test_output_data test_output_data describe describe proc~test_output_data->describe it it proc~test_output_data->it Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/test_output_data.html"},{"title":"check_norm_of_difference – miniFAVOR","text":"public function check_norm_of_difference() result(result_) Arguments None Return Value type(result_t) Calls proc~~check_norm_of_difference~2~~CallsGraph proc~check_norm_of_difference~2 check_norm_of_difference assert_equals assert_equals proc~check_norm_of_difference~2->assert_equals Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/check_norm_of_difference~2.html"},{"title":"test_input_data – miniFAVOR","text":"public function test_input_data() result(test_item) Arguments None Return Value type(test_item_t) Calls proc~~test_input_data~~CallsGraph proc~test_input_data test_input_data describe describe proc~test_input_data->describe it it proc~test_input_data->it Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/test_input_data.html"},{"title":"check_definition – miniFAVOR","text":"public function check_definition() result(result_) Arguments None Return Value type(result_t) Calls proc~~check_definition~~CallsGraph proc~check_definition check_definition assert_that assert_that proc~check_definition->assert_that Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/check_definition.html"},{"title":"test_random_samples – miniFAVOR","text":"public function test_random_samples() result(test_item) Arguments None Return Value type(test_item_t) Calls proc~~test_random_samples~~CallsGraph proc~test_random_samples test_random_samples describe describe proc~test_random_samples->describe it it proc~test_random_samples->it Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/test_random_samples.html"},{"title":"run – miniFAVOR","text":"subroutine run() Uses input_data_tests output_data_tests random_samples_tests vegetables proc~~run~~UsesGraph proc~run run vegetables vegetables proc~run->vegetables module~output_data_tests output_data_tests proc~run->module~output_data_tests module~input_data_tests input_data_tests proc~run->module~input_data_tests module~random_samples_tests random_samples_tests proc~run->module~random_samples_tests module~output_data_tests->vegetables module~output_data_m output_data_m module~output_data_tests->module~output_data_m iso_fortran_env iso_fortran_env module~output_data_tests->iso_fortran_env module~input_data_tests->vegetables module~input_data_m input_data_m module~input_data_tests->module~input_data_m module~input_data_tests->iso_fortran_env module~random_samples_tests->vegetables module~random_samples_m random_samples_m module~random_samples_tests->module~random_samples_m module~output_data_m->module~input_data_m module~output_data_m->module~random_samples_m oracle_interface oracle_interface module~output_data_m->oracle_interface object_interface object_interface module~random_samples_m->object_interface Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Arguments None Calls proc~~run~~CallsGraph proc~run run random_samples_tests_test_random_samples random_samples_tests_test_random_samples proc~run->random_samples_tests_test_random_samples input_data_tests_test_input_data input_data_tests_test_input_data proc~run->input_data_tests_test_input_data test_that test_that proc~run->test_that output_data_tests_test_output_data output_data_tests_test_output_data proc~run->output_data_tests_test_output_data run_tests run_tests proc~run->run_tests Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~run~~CalledByGraph proc~run run program~main main program~main->proc~run Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/run.html"},{"title":"check_whole_shebang – miniFAVOR","text":"public function check_whole_shebang() result(result_) Arguments None Return Value type(result_t) Calls proc~~check_whole_shebang~~CallsGraph proc~check_whole_shebang check_whole_shebang assert_that assert_that proc~check_whole_shebang->assert_that proc~reference_wrapper reference_wrapper proc~check_whole_shebang->proc~reference_wrapper proc~reference_minifavor reference_minifavor proc~reference_wrapper->proc~reference_minifavor proc~cpi_t~2 cpi_t proc~reference_minifavor->proc~cpi_t~2 proc~rtndt~2 rtndt proc~reference_minifavor->proc~rtndt~2 proc~cf~2 cf proc~reference_minifavor->proc~cf~2 proc~ki_t~2 ki_t proc~reference_minifavor->proc~ki_t~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/check_whole_shebang.html"},{"title":"reference_wrapper – miniFAVOR","text":"public function reference_wrapper(input_data) result(output_data) Uses reference_minifavor_m reference_inputs_h reference_outputs_h proc~~reference_wrapper~~UsesGraph proc~reference_wrapper reference_wrapper module~reference_minifavor_m reference_minifavor_m proc~reference_wrapper->module~reference_minifavor_m module~reference_inputs_h reference_inputs_h proc~reference_wrapper->module~reference_inputs_h module~reference_outputs_h reference_outputs_h proc~reference_wrapper->module~reference_outputs_h Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Arguments Type Intent Optional Attributes Name type( input_data_t ), intent(in) :: input_data Return Value type( output_data_t ) Calls proc~~reference_wrapper~~CallsGraph proc~reference_wrapper reference_wrapper proc~reference_minifavor reference_minifavor proc~reference_wrapper->proc~reference_minifavor proc~cpi_t~2 cpi_t proc~reference_minifavor->proc~cpi_t~2 proc~rtndt~2 rtndt proc~reference_minifavor->proc~rtndt~2 proc~cf~2 cf proc~reference_minifavor->proc~cf~2 proc~ki_t~2 ki_t proc~reference_minifavor->proc~ki_t~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~reference_wrapper~~CalledByGraph proc~reference_wrapper reference_wrapper proc~check_whole_shebang check_whole_shebang proc~check_whole_shebang->proc~reference_wrapper Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/reference_wrapper.html"},{"title":"test_output_data – miniFAVOR","text":"public function test_output_data() result(test_item) Arguments None Return Value type(test_item_t) Calls proc~~test_output_data~2~~CallsGraph proc~test_output_data~2 test_output_data describe describe proc~test_output_data~2->describe it it proc~test_output_data~2->it Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/test_output_data~2.html"},{"title":"run – miniFAVOR","text":"subroutine run() Uses whole_shebang_tests vegetables proc~~run~2~~UsesGraph proc~run~2 run vegetables vegetables proc~run~2->vegetables module~whole_shebang_tests whole_shebang_tests proc~run~2->module~whole_shebang_tests module~whole_shebang_tests->vegetables module~output_data_m output_data_m module~whole_shebang_tests->module~output_data_m module~input_data_m input_data_m module~whole_shebang_tests->module~input_data_m module~random_samples_m random_samples_m module~whole_shebang_tests->module~random_samples_m iso_fortran_env iso_fortran_env module~whole_shebang_tests->iso_fortran_env module~output_data_m->module~input_data_m module~output_data_m->module~random_samples_m oracle_interface oracle_interface module~output_data_m->oracle_interface object_interface object_interface module~random_samples_m->object_interface Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Arguments None Calls proc~~run~2~~CallsGraph proc~run~2 run whole_shebang_tests_test_output_data whole_shebang_tests_test_output_data proc~run~2->whole_shebang_tests_test_output_data test_that test_that proc~run~2->test_that run_tests run_tests proc~run~2->run_tests Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~run~2~~CalledByGraph proc~run~2 run program~main~2 main program~main~2->proc~run~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/run~2.html"},{"title":"cf – miniFAVOR","text":"public function cf(cu, ni) Uses reference_constants_h proc~~cf~2~~UsesGraph proc~cf~2 cf module~reference_constants_h reference_constants_h proc~cf~2->module~reference_constants_h Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Arguments Type Intent Optional Attributes Name real, intent(in) :: cu real, intent(in) :: ni Return Value real Called by proc~~cf~2~~CalledByGraph proc~cf~2 cf proc~reference_minifavor reference_minifavor proc~reference_minifavor->proc~cf~2 proc~reference_wrapper reference_wrapper proc~reference_wrapper->proc~reference_minifavor proc~check_whole_shebang check_whole_shebang proc~check_whole_shebang->proc~reference_wrapper Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code cf Source Code function RTndt ( a , CF , fsurf , RTndt0 ) !Variables real :: RTndt , D_RTepi , D_RTndt , phi , f real , intent ( in ) :: a , CF , fsurf , RTndt0 !Calculate D_RTepi call RANDOM_NUMBER ( phi ) D_RTepi = - 2 9.5 + 7 8.0 * ( - log ( 1 - phi )) ** ( 1 / 1.73 ) !Calculate D_RTndt f = fsurf * exp ( - 0.24 * a ) D_RTndt = CF * f ** ( 0.28 - 0.10 * log10 ( f )) !Calculate the RTndt RTndt = RTndt0 + D_RTepi + D_RTndt end function RTndt !This function calculates the weld chemistry factor given the copper and nickel contents function CF ( Cu , Ni ) use reference_constants_h , only : CF_weld !Variables real :: CF real , intent ( in ) :: Cu , Ni integer :: Cu_int , Ni_int real :: CF_1 , CF_2 !Calculate indexes for copper interpolation: !  multiply the Cu-% by 100 and take the integer truncation to find interpolation bounds !  truncate interpolation between 0% and 0.40% Cu_int = int ( Cu * 100 ) if ( Cu_int < 0 ) then Cu_int = 0 else if ( Cu_int > 40 ) then Cu_int = 40 end if !Calculate indexes for nickel interpolation: !  multiply the Ni-% by 100 and take the integer truncation to find interpolation bounds !  truncate interpolation between 0% and 1.20% Ni_int = int ( Ni * 100 ) if ( Ni_int < 0 ) then Ni_int = 0 else if ( Ni_int > 120 ) then Ni_int = 120 end if !Nickel contents in CF_weld are at intervals of 0.20% nickel Ni_int = int ( Ni_int / 20 ) + 1 !Bi-linear interpolation if ( Cu <= 0.0 . or . Cu >= 0.40 ) then !only interpolate on nickel select case ( Ni_int ) case ( 7 ) CF = CF_weld ( Cu_int , Ni_int ) case default CF = CF_weld ( Cu_int , Ni_int ) + & ( Ni - 0.2 * ( Ni_int - 1 )) / 0.2 * ( CF_weld ( Cu_int , Ni_int + 1 ) - CF_weld ( Cu_int , Ni_int )) end select else !First, interpolate on copper select case ( Ni_int ) case ( 7 ) CF = CF_weld ( Cu_int , Ni_int ) + & ( Cu - 0.01 * ( Cu_int )) / 0.01 * ( CF_weld ( Cu_int + 1 , Ni_int ) - CF_weld ( Cu_int + 1 , Ni_int )) case default CF_1 = CF_weld ( Cu_int , Ni_int ) + & ( Cu - 0.01 * ( Cu_int )) / 0.01 * ( CF_weld ( Cu_int + 1 , Ni_int ) - CF_weld ( Cu_int + 1 , Ni_int )) CF_2 = CF_weld ( Cu_int , Ni_int + 1 ) + & ( Cu - 0.01 * ( Cu_int )) / 0.01 * ( CF_weld ( Cu_int + 1 , Ni_int + 1 ) - CF_weld ( Cu_int + 1 , Ni_int + 1 )) !Second, interpolate on nickel CF = CF_1 + ( Ni - 0.2 * ( Ni_int - 1 )) / 0.2 * ( CF_2 - CF_1 ) end select end if end function CF","tags":"","loc":"proc/cf~2.html"},{"title":"rtndt – miniFAVOR","text":"public function rtndt(a, cf, fsurf, rtndt0) Arguments Type Intent Optional Attributes Name real, intent(in) :: a real, intent(in) :: cf real, intent(in) :: fsurf real, intent(in) :: rtndt0 Return Value real Called by proc~~rtndt~2~~CalledByGraph proc~rtndt~2 rtndt proc~reference_minifavor reference_minifavor proc~reference_minifavor->proc~rtndt~2 proc~reference_wrapper reference_wrapper proc~reference_wrapper->proc~reference_minifavor proc~check_whole_shebang check_whole_shebang proc~check_whole_shebang->proc~reference_wrapper Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code rtndt Source Code function RTndt ( a , CF , fsurf , RTndt0 ) !Variables real :: RTndt , D_RTepi , D_RTndt , phi , f real , intent ( in ) :: a , CF , fsurf , RTndt0 !Calculate D_RTepi call RANDOM_NUMBER ( phi ) D_RTepi = - 2 9.5 + 7 8.0 * ( - log ( 1 - phi )) ** ( 1 / 1.73 ) !Calculate D_RTndt f = fsurf * exp ( - 0.24 * a ) D_RTndt = CF * f ** ( 0.28 - 0.10 * log10 ( f )) !Calculate the RTndt RTndt = RTndt0 + D_RTepi + D_RTndt end function RTndt","tags":"","loc":"proc/rtndt~2.html"},{"title":"sample_chem – miniFAVOR","text":"public subroutine sample_chem(cu_ave, ni_ave, cu_sig, ni_sig, cu_local, ni_local) Arguments Type Intent Optional Attributes Name real, intent(in) :: cu_ave real, intent(in) :: ni_ave real, intent(in) :: cu_sig real, intent(in) :: ni_sig real, intent(out) :: cu_local real, intent(out) :: ni_local Contents Source Code sample_chem Source Code subroutine sample_chem ( Cu_ave , Ni_ave , Cu_sig , Ni_sig , Cu_local , Ni_local ) !Variables real , intent ( in ) :: Cu_ave , Ni_ave , Cu_sig , Ni_sig real , intent ( out ) :: Cu_local , Ni_local real :: u , Cu_bar , Cu_sig_star , Cu_sig_local !Sample local copper content based on weld copper sampling procedure Cu_bar = Cu_ave * Cu_sig Cu_sig_star = min ( 0.0718 * Cu_ave , 0.0185 ) call RANDOM_NUMBER ( u ) Cu_sig_local = Cu_bar + Cu_sig_star * sqrt ( 2.0 ) * erfc ( 2 * u - 1 ) call RANDOM_NUMBER ( u ) Cu_local = Cu_ave + Cu_sig_local * sqrt ( 2.0 ) * erfc ( 2 * u - 1 ) !Sample local nickel content based on weld nickel heat 34B009 & W5214 procedure call RANDOM_NUMBER ( u ) Ni_local = Ni_ave + Ni_sig * sqrt ( 2.0 ) * erfc ( 2 * u - 1 ) end subroutine sample_chem","tags":"","loc":"proc/sample_chem.html"},{"title":"cpi_t – miniFAVOR","text":"public function cpi_t(k, rtndt, t) Arguments Type Intent Optional Attributes Name real, intent(in) :: k real, intent(in) :: rtndt real, intent(in) :: t Return Value real Called by proc~~cpi_t~2~~CalledByGraph proc~cpi_t~2 cpi_t proc~reference_minifavor reference_minifavor proc~reference_minifavor->proc~cpi_t~2 proc~reference_wrapper reference_wrapper proc~reference_wrapper->proc~reference_minifavor proc~check_whole_shebang check_whole_shebang proc~check_whole_shebang->proc~reference_wrapper Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code cpi_t Source Code function cpi_t ( K , RTndt , T ) !Variables real :: cpi_t real , intent ( in ) :: K , RTndt , T real :: aKic , bKic , cKic !Calculate aKic, bKic, cKic aKic = 1 9.35 + 8.335 * exp ( 0.02254 * ( T - RTndt )) bKic = 1 5.61 + 5 0.132 * exp ( 0.008 * ( T - RTndt )) cKic = 4.0 !Calculate cpi_t if ( K < aKic ) then cpi_t = 0.0 else cpi_t = 1 - exp ( - (( K - aKic ) / bKic ) ** cKic ) end if end function cpi_t","tags":"","loc":"proc/cpi_t~2.html"},{"title":"ki_t – miniFAVOR","text":"public function ki_t(a, b, stress) Uses reference_constants_h proc~~ki_t~2~~UsesGraph proc~ki_t~2 ki_t module~reference_constants_h reference_constants_h proc~ki_t~2->module~reference_constants_h Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Arguments Type Intent Optional Attributes Name real, intent(in) :: a real, intent(in) :: b real, intent(in) :: stress Return Value real Called by proc~~ki_t~2~~CalledByGraph proc~ki_t~2 ki_t proc~reference_minifavor reference_minifavor proc~reference_minifavor->proc~ki_t~2 proc~reference_wrapper reference_wrapper proc~reference_wrapper->proc~reference_minifavor proc~check_whole_shebang check_whole_shebang proc~check_whole_shebang->proc~reference_wrapper Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Source Code ki_t Source Code function Ki_t ( a , b , stress ) use reference_constants_h , only : Pi !Variables real :: Ki_t real , intent ( in ) :: a , b , stress !Calculate Ki_t Ki_t = stress * sqrt ( Pi * a ) * & ( 1.122 - 0.231 * ( a / b ) + 1 0.55 * ( a / b ) ** 2 - 2 1.71 * ( a / b ) ** 3 + 3 0.382 * ( a / b ) ** 4 ) end function Ki_t","tags":"","loc":"proc/ki_t~2.html"},{"title":"reference_minifavor – miniFAVOR","text":"public subroutine reference_minifavor() Uses reference_inputs_h reference_outputs_h reference_calc_rtndt reference_calc_k reference_calc_cpi proc~~reference_minifavor~~UsesGraph proc~reference_minifavor reference_minifavor module~reference_inputs_h reference_inputs_h proc~reference_minifavor->module~reference_inputs_h module~reference_outputs_h reference_outputs_h proc~reference_minifavor->module~reference_outputs_h module~reference_calc_rtndt reference_calc_rtndt proc~reference_minifavor->module~reference_calc_rtndt module~reference_calc_cpi reference_calc_cpi proc~reference_minifavor->module~reference_calc_cpi module~reference_calc_k reference_calc_k proc~reference_minifavor->module~reference_calc_k Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Arguments None Calls proc~~reference_minifavor~~CallsGraph proc~reference_minifavor reference_minifavor proc~cpi_t~2 cpi_t proc~reference_minifavor->proc~cpi_t~2 proc~rtndt~2 rtndt proc~reference_minifavor->proc~rtndt~2 proc~cf~2 cf proc~reference_minifavor->proc~cf~2 proc~ki_t~2 ki_t proc~reference_minifavor->proc~ki_t~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~reference_minifavor~~CalledByGraph proc~reference_minifavor reference_minifavor proc~reference_wrapper reference_wrapper proc~reference_wrapper->proc~reference_minifavor proc~check_whole_shebang check_whole_shebang proc~check_whole_shebang->proc~reference_wrapper Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/reference_minifavor.html"},{"title":"cu_local – miniFAVOR","text":"module procedure cu_local pure module function cu_local(self) result(self_cu_local) Interface → Arguments Type Intent Optional Attributes Name class( random_samples_t ), intent(in) :: self Return Value real Called by proc~~cu_local~~CalledByGraph proc~cu_local cu_local interface~cu_local cu_local interface~cu_local->proc~cu_local Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/cu_local.html"},{"title":"cu_sig_local – miniFAVOR","text":"module procedure cu_sig_local pure module function cu_sig_local(self) result(self_cu_sig_local) Interface → Arguments Type Intent Optional Attributes Name class( random_samples_t ), intent(in) :: self Return Value real Called by proc~~cu_sig_local~~CalledByGraph proc~cu_sig_local cu_sig_local interface~cu_sig_local cu_sig_local interface~cu_sig_local->proc~cu_sig_local Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/cu_sig_local.html"},{"title":"define – miniFAVOR","text":"module procedure define module subroutine define(self) Interface → Arguments Type Intent Optional Attributes Name class( random_samples_t ), intent(out) :: self Called by proc~~define~2~~CalledByGraph proc~define~2 define interface~define~2 define interface~define~2->proc~define~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/define~2.html"},{"title":"ni_local – miniFAVOR","text":"module procedure ni_local pure module function ni_local(self) result(self_ni_local) Interface → Arguments Type Intent Optional Attributes Name class( random_samples_t ), intent(in) :: self Return Value real Called by proc~~ni_local~~CalledByGraph proc~ni_local ni_local interface~ni_local ni_local interface~ni_local->proc~ni_local Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/ni_local.html"},{"title":"phi – miniFAVOR","text":"module procedure phi elemental module function phi(self) result(self_phi) Interface → Arguments Type Intent Optional Attributes Name class( random_samples_t ), intent(in) :: self Return Value real Called by proc~~phi~~CalledByGraph proc~phi phi interface~phi phi interface~phi->proc~phi Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/phi.html"},{"title":"write_formatted – miniFAVOR","text":"module procedure write_formatted module subroutine write_formatted(self, unit, iotype, v_list, iostat, iomsg) Interface → Uses iso_fortran_env proc~~write_formatted~4~~UsesGraph proc~write_formatted~4 write_formatted iso_fortran_env iso_fortran_env proc~write_formatted~4->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Arguments Type Intent Optional Attributes Name class( random_samples_t ), intent(in) :: self integer, intent(in) :: unit character(len=*), intent(in) :: iotype integer, intent(in) :: v_list (:) integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg Calls proc~~write_formatted~4~~CallsGraph proc~write_formatted~4 write_formatted assert assert proc~write_formatted~4->assert Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~write_formatted~4~~CalledByGraph proc~write_formatted~4 write_formatted interface~write_formatted~4 write_formatted interface~write_formatted~4->proc~write_formatted~4 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/write_formatted~4.html"},{"title":"a – miniFAVOR","text":"module procedure a pure module function a(self) result(self_a) Interface → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real Called by proc~~a~~CalledByGraph proc~a a interface~a a interface~a->proc~a Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/a.html"},{"title":"assign – miniFAVOR","text":"module procedure assign pure module subroutine assign(lhs, rhs) Interface → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(inout) :: lhs type( input_data_t ), intent(in) :: rhs Called by proc~~assign~2~~CalledByGraph proc~assign~2 assign interface~assign~2 assign interface~assign~2->proc~assign~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/assign~2.html"},{"title":"b – miniFAVOR","text":"module procedure b pure module function b(self) result(self_b) Interface → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real Called by proc~~b~~CalledByGraph proc~b b interface~b b interface~b->proc~b Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/b.html"},{"title":"broadcast – miniFAVOR","text":"module procedure broadcast module subroutine broadcast(self, source_image) Interface → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(inout) :: self integer, intent(in) :: source_image Calls proc~~broadcast~~CallsGraph proc~broadcast broadcast proc~broadcast_components broadcast_components proc~broadcast->proc~broadcast_components Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~broadcast~~CalledByGraph proc~broadcast broadcast interface~broadcast broadcast interface~broadcast->proc~broadcast Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/broadcast.html"},{"title":"cu_ave – miniFAVOR","text":"module procedure cu_ave pure module function cu_ave(self) result(self_cu_ave) Interface → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real Called by proc~~cu_ave~~CalledByGraph proc~cu_ave cu_ave interface~cu_ave cu_ave interface~cu_ave->proc~cu_ave Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/cu_ave.html"},{"title":"cu_sig – miniFAVOR","text":"module procedure cu_sig pure module function cu_sig(self) result(self_cu_sig) Interface → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real Called by proc~~cu_sig~~CalledByGraph proc~cu_sig cu_sig interface~cu_sig cu_sig interface~cu_sig->proc~cu_sig Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/cu_sig.html"},{"title":"default_input_data_t – miniFAVOR","text":"module procedure default_input_data_t module procedure default_input_data_t() Arguments None Contents None","tags":"","loc":"proc/default_input_data_t.html"},{"title":"define – miniFAVOR","text":"module procedure define module subroutine define(self, fn_in) Interface → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(out) :: self character(len=*), intent(in) :: fn_in Called by proc~~define~~CalledByGraph proc~define define interface~define define interface~define->proc~define Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/define.html"},{"title":"details – miniFAVOR","text":"module procedure details pure module function details(self) result(self_details) Interface → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value logical Called by proc~~details~~CalledByGraph proc~details details interface~details details interface~details->proc~details Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/details.html"},{"title":"fsurf – miniFAVOR","text":"module procedure fsurf pure module function fsurf(self) result(self_fsurf) Interface → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real Called by proc~~fsurf~~CalledByGraph proc~fsurf fsurf interface~fsurf fsurf interface~fsurf->proc~fsurf Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/fsurf.html"},{"title":"ni_ave – miniFAVOR","text":"module procedure ni_ave pure module function ni_ave(self) result(self_ni_ave) Interface → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real Called by proc~~ni_ave~~CalledByGraph proc~ni_ave ni_ave interface~ni_ave ni_ave interface~ni_ave->proc~ni_ave Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/ni_ave.html"},{"title":"ni_sig – miniFAVOR","text":"module procedure ni_sig pure module function ni_sig(self) result(self_ni_sig) Interface → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real Called by proc~~ni_sig~~CalledByGraph proc~ni_sig ni_sig interface~ni_sig ni_sig interface~ni_sig->proc~ni_sig Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/ni_sig.html"},{"title":"norm – miniFAVOR","text":"module procedure norm pure module function norm(self) result(norm_of_self) Interface → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real Called by proc~~norm~2~~CalledByGraph proc~norm~2 norm interface~norm~2 norm interface~norm~2->proc~norm~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/norm~2.html"},{"title":"nsim – miniFAVOR","text":"module procedure nsim pure module function nsim(self) result(self_nsim) Interface → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value integer Called by proc~~nsim~2~~CalledByGraph proc~nsim~2 nsim interface~nsim~2 nsim interface~nsim~2->proc~nsim~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/nsim~2.html"},{"title":"ntime – miniFAVOR","text":"module procedure ntime pure module function ntime(self) result(self_ntime) Interface → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value integer Called by proc~~ntime~2~~CalledByGraph proc~ntime~2 ntime interface~ntime~2 ntime interface~ntime~2->proc~ntime~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/ntime~2.html"},{"title":"rtndt0 – miniFAVOR","text":"module procedure rtndt0 pure module function rtndt0(self) result(self_rtndt0) Interface → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real Called by proc~~rtndt0~~CalledByGraph proc~rtndt0 rtndt0 interface~rtndt0 rtndt0 interface~rtndt0->proc~rtndt0 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/rtndt0.html"},{"title":"stress – miniFAVOR","text":"module procedure stress pure module function stress(self) result(self_stress) Interface → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real,\n  allocatable,(:) Called by proc~~stress~~CalledByGraph proc~stress stress interface~stress stress interface~stress->proc~stress Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/stress.html"},{"title":"subtract – miniFAVOR","text":"module procedure subtract pure module function subtract(self, rhs) result(difference) Interface → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self type( input_data_t ), intent(in) :: rhs Return Value type( input_data_t ) Called by proc~~subtract~2~~CalledByGraph proc~subtract~2 subtract interface~subtract~2 subtract interface~subtract~2->proc~subtract~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/subtract~2.html"},{"title":"temp – miniFAVOR","text":"module procedure temp pure module function temp(self) result(self_temp) Interface → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real,\n  allocatable,(:) Called by proc~~temp~~CalledByGraph proc~temp temp interface~temp temp interface~temp->proc~temp Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/temp.html"},{"title":"cu – miniFAVOR","text":"module procedure cu elemental module function cu(self) result(my_cu) Interface → Arguments Type Intent Optional Attributes Name class( material_content_t ), intent(in) :: self Return Value real Called by proc~~cu~~CalledByGraph proc~cu cu interface~cu cu interface~cu->proc~cu Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/cu.html"},{"title":"gather – miniFAVOR","text":"module procedure gather module subroutine gather(material_content, data_partition, dim) Interface → Arguments Type Intent Optional Attributes Name type( material_content_t ), intent(inout) :: material_content (:) type(data_partition_t), intent(in) :: data_partition integer, optional :: dim Called by proc~~gather~~CalledByGraph proc~gather gather interface~gather gather interface~gather->proc~gather proc~whole_shebang whole_shebang proc~whole_shebang->interface~gather Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/gather.html"},{"title":"ni – miniFAVOR","text":"module procedure ni elemental module function ni(self) result(my_ni) Interface → Arguments Type Intent Optional Attributes Name class( material_content_t ), intent(in) :: self Return Value real Called by proc~~ni~~CalledByGraph proc~ni ni interface~ni ni interface~ni->proc~ni Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/ni.html"},{"title":"sample_chem – miniFAVOR","text":"module procedure sample_chem module procedure sample_chem() Arguments None Calls proc~~sample_chem~2~~CallsGraph proc~sample_chem~2 sample_chem assert assert proc~sample_chem~2->assert interface~material_content_t material_content_t proc~sample_chem~2->interface~material_content_t Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/sample_chem~2.html"},{"title":"write_formatted – miniFAVOR","text":"module procedure write_formatted module subroutine write_formatted(self, unit, iotype, v_list, iostat, iomsg) Interface → Uses iso_fortran_env proc~~write_formatted~~UsesGraph proc~write_formatted write_formatted iso_fortran_env iso_fortran_env proc~write_formatted->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Arguments Type Intent Optional Attributes Name class( material_content_t ), intent(in) :: self integer, intent(in) :: unit character(len=*), intent(in) :: iotype integer, intent(in) :: v_list (:) integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg Calls proc~~write_formatted~~CallsGraph proc~write_formatted write_formatted assert assert proc~write_formatted->assert Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~write_formatted~~CalledByGraph proc~write_formatted write_formatted interface~write_formatted write_formatted interface~write_formatted->proc~write_formatted Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/write_formatted.html"},{"title":"new_detailed_output – miniFAVOR","text":"module procedure new_detailed_output module procedure new_detailed_output() Arguments None Contents None","tags":"","loc":"proc/new_detailed_output.html"},{"title":"write_formatted – miniFAVOR","text":"module procedure write_formatted module subroutine write_formatted(self, unit, iotype, v_list, iostat, iomsg) Interface → Arguments Type Intent Optional Attributes Name class( detailed_output_t ), intent(in) :: self integer, intent(in) :: unit character(len=*), intent(in) :: iotype integer, intent(in) :: v_list (:) integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg Calls proc~~write_formatted~2~~CallsGraph proc~write_formatted~2 write_formatted k_hist k_hist proc~write_formatted~2->k_hist r_tndt r_tndt proc~write_formatted~2->r_tndt cpi_avg cpi_avg proc~write_formatted~2->cpi_avg cpi cpi proc~write_formatted~2->cpi chemistry_factor chemistry_factor proc~write_formatted~2->chemistry_factor chemistry_content chemistry_content proc~write_formatted~2->chemistry_content Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Called by proc~~write_formatted~2~~CalledByGraph proc~write_formatted~2 write_formatted interface~write_formatted~2 write_formatted interface~write_formatted~2->proc~write_formatted~2 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/write_formatted~2.html"},{"title":"assign – miniFAVOR","text":"module procedure assign module subroutine assign(self, rhs) Interface → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(inout) :: self class(oracle_t), intent(in) :: rhs Called by proc~~assign~~CalledByGraph proc~assign assign interface~assign assign interface~assign->proc~assign Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/assign.html"},{"title":"chemistry_content – miniFAVOR","text":"module procedure chemistry_content module function chemistry_content(self) result(my_chemistry_content) Interface → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real,\n  allocatable,(:,:) Called by proc~~chemistry_content~~CalledByGraph proc~chemistry_content chemistry_content interface~chemistry_content chemistry_content interface~chemistry_content->proc~chemistry_content Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/chemistry_content.html"},{"title":"chemistry_factor – miniFAVOR","text":"module procedure chemistry_factor module function chemistry_factor(self) result(my_chemistry_factor) Interface → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real,\n  allocatable,(:) Called by proc~~chemistry_factor~~CalledByGraph proc~chemistry_factor chemistry_factor interface~chemistry_factor chemistry_factor interface~chemistry_factor->proc~chemistry_factor Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/chemistry_factor.html"},{"title":"cpi – miniFAVOR","text":"module procedure cpi module function cpi(self) result(my_cpi) Interface → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real,\n  allocatable,(:) Called by proc~~cpi~~CalledByGraph proc~cpi cpi interface~cpi cpi interface~cpi->proc~cpi Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/cpi.html"},{"title":"cpi_avg – miniFAVOR","text":"module procedure cpi_avg module function cpi_avg(self) result(my_cpi_avg) Interface → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real,\n  allocatable,(:) Called by proc~~cpi_avg~~CalledByGraph proc~cpi_avg cpi_avg interface~cpi_avg cpi_avg interface~cpi_avg->proc~cpi_avg Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/cpi_avg.html"},{"title":"default_constructor – miniFAVOR","text":"module procedure default_constructor module procedure default_constructor() Arguments None Contents None","tags":"","loc":"proc/default_constructor.html"},{"title":"k_hist – miniFAVOR","text":"module procedure k_hist module function k_hist(self) result(my_k_hist) Interface → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real,\n  allocatable,(:) Called by proc~~k_hist~~CalledByGraph proc~k_hist k_hist interface~k_hist k_hist interface~k_hist->proc~k_hist proc~whole_shebang whole_shebang proc~whole_shebang->interface~k_hist Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/k_hist.html"},{"title":"new_output_data – miniFAVOR","text":"module procedure new_output_data module procedure new_output_data() Arguments None Contents None","tags":"","loc":"proc/new_output_data.html"},{"title":"norm – miniFAVOR","text":"module procedure norm pure module function norm(self) result(norm_of_self) Interface → compute L-infinity norm Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real Called by proc~~norm~~CalledByGraph proc~norm norm interface~norm norm interface~norm->proc~norm Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/norm.html"},{"title":"nsim – miniFAVOR","text":"module procedure nsim module function nsim(self) result(my_nsim) Interface → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value integer Called by proc~~nsim~~CalledByGraph proc~nsim nsim interface~nsim nsim interface~nsim->proc~nsim Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/nsim.html"},{"title":"ntime – miniFAVOR","text":"module procedure ntime module function ntime(self) result(my_ntime) Interface → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value integer Called by proc~~ntime~~CalledByGraph proc~ntime ntime interface~ntime ntime interface~ntime->proc~ntime Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/ntime.html"},{"title":"r_tndt – miniFAVOR","text":"module procedure r_tndt module function r_tndt(self) result(my_r_tndt) Interface → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real,\n  allocatable,(:) Called by proc~~r_tndt~~CalledByGraph proc~r_tndt r_tndt interface~r_tndt r_tndt interface~r_tndt->proc~r_tndt Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/r_tndt.html"},{"title":"subtract – miniFAVOR","text":"module procedure subtract module function subtract(self, rhs) result(difference) Interface → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self class(oracle_t), intent(in) :: rhs Return Value class(oracle_t),\n  allocatable Called by proc~~subtract~~CalledByGraph proc~subtract subtract interface~subtract subtract interface~subtract->proc~subtract Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/subtract.html"},{"title":"whole_shebang – miniFAVOR","text":"module procedure whole_shebang module procedure whole_shebang() Uses calc_rtndt calc_k calc_cpi material_content_m data_partition_interface proc~~whole_shebang~~UsesGraph proc~whole_shebang whole_shebang module~calc_rtndt calc_rtndt proc~whole_shebang->module~calc_rtndt module~material_content_m material_content_m proc~whole_shebang->module~material_content_m module~calc_k calc_k proc~whole_shebang->module~calc_k data_partition_interface data_partition_interface proc~whole_shebang->data_partition_interface module~calc_cpi calc_cpi proc~whole_shebang->module~calc_cpi module~calc_rtndt->module~material_content_m assertions_interface assertions_interface module~calc_rtndt->assertions_interface module~material_content_m->data_partition_interface Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Arguments None Calls proc~~whole_shebang~~CallsGraph proc~whole_shebang whole_shebang proc~rtndt rtndt proc~whole_shebang->proc~rtndt cpi_hist cpi_hist proc~whole_shebang->cpi_hist interface~k_hist k_hist proc~whole_shebang->interface~k_hist proc~cpi_t cpi_t proc~whole_shebang->proc~cpi_t proc~cf cf proc~whole_shebang->proc~cf interface~gather gather proc~whole_shebang->interface~gather assert assert proc~whole_shebang->assert interface~output_data_t output_data_t proc~whole_shebang->interface~output_data_t temp temp proc~whole_shebang->temp random_samples random_samples proc~whole_shebang->random_samples proc~k_hist k_hist interface~k_hist->proc~k_hist proc~gather gather interface~gather->proc~gather Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/whole_shebang.html"},{"title":"write_formatted – miniFAVOR","text":"module procedure write_formatted module subroutine write_formatted(self, unit, iotype, v_list, iostat, iomsg) Interface → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self integer, intent(in) :: unit character(len=*), intent(in) :: iotype integer, intent(in) :: v_list (:) integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg Called by proc~~write_formatted~3~~CalledByGraph proc~write_formatted~3 write_formatted interface~write_formatted~3 write_formatted interface~write_formatted~3->proc~write_formatted~3 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents None","tags":"","loc":"proc/write_formatted~3.html"},{"title":"material_content_m – miniFAVOR","text":"Uses data_partition_interface module~~material_content_m~~UsesGraph module~material_content_m material_content_m data_partition_interface data_partition_interface module~material_content_m->data_partition_interface Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by Descendants: material_content_s module~~material_content_m~~UsedByGraph module~material_content_m material_content_m proc~whole_shebang whole_shebang proc~whole_shebang->module~material_content_m module~calc_rtndt calc_rtndt proc~whole_shebang->module~calc_rtndt module~material_content_s material_content_s module~material_content_s->module~material_content_m module~calc_rtndt->module~material_content_m program~minifavor minifavor program~minifavor->module~calc_rtndt Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces gather material_content_t cu ni write_formatted Derived Types material_content_t Interfaces interface public module subroutine gather(material_content, data_partition, dim) Implementation → Arguments Type Intent Optional Attributes Name type( material_content_t ), intent(inout) :: material_content (:) type(data_partition_t), intent(in) :: data_partition integer, optional :: dim public interface material_content_t public elemental function sample_chem(cu_ave, ni_ave, cu_sig, ni_sig, samples) result(material_content) Arguments Type Intent Optional Attributes Name real, intent(in) :: cu_ave real, intent(in) :: ni_ave real, intent(in) :: cu_sig real, intent(in) :: ni_sig type(random_samples_t), intent(in) :: samples Return Value type( material_content_t ) interface private elemental module function cu(self) result(my_cu) Implementation → Arguments Type Intent Optional Attributes Name class( material_content_t ), intent(in) :: self Return Value real interface private elemental module function ni(self) result(my_ni) Implementation → Arguments Type Intent Optional Attributes Name class( material_content_t ), intent(in) :: self Return Value real interface private module subroutine write_formatted(self, unit, iotype, v_list, iostat, iomsg) Implementation → Arguments Type Intent Optional Attributes Name class( material_content_t ), intent(in) :: self integer, intent(in) :: unit character(len=*), intent(in) :: iotype integer, intent(in) :: v_list (:) integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg Derived Types type, public :: material_content_t Elemental content Components Type Visibility Attributes Name Initial real, private :: cu_ copper real, private :: ni_ nickel Constructor public elemental function sample_chem (cu_ave, ni_ave, cu_sig, ni_sig, samples) Type-Bound Procedures procedure, public :: cu procedure, public :: ni","tags":"","loc":"module/material_content_m.html"},{"title":"constants_h – miniFAVOR","text":"Used by module~~constants_h~~UsedByGraph module~constants_h constants_h proc~ki_t ki_t proc~ki_t->module~constants_h proc~cf cf proc~cf->module~constants_h Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables cf_weld pi Variables Type Visibility Attributes Name Initial real, public, parameter, dimension(0:40,7) :: cf_weld = reshape((/20, 20, 21, 22, 24, 26, 29, 32, 36, 40, 44, 49, 52, 58, 61, 66, 70, 75, 79, 83, 88, 92, 97, 101, 105, 110, 113, 119, 122, 128, 131, 136, 140, 144, 149, 153, 158, 162, 166, 171, 175, 20, 20, 26, 35, 43, 49, 52, 55, 58, 61, 65, 68, 72, 76, 79, 84, 88, 92, 95, 100, 104, 108, 112, 117, 121, 126, 130, 134, 138, 142, 146, 151, 155, 160, 164, 168, 172, 177, 182, 185, 189, 20, 20, 27, 41, 54, 67, 77, 85, 90, 94, 97, 101, 103, 106, 109, 112, 115, 119, 122, 126, 129, 133, 137, 140, 144, 148, 151, 155, 160, 164, 167, 172, 175, 180, 184, 187, 191, 196, 200, 203, 207, 20, 20, 27, 41, 54, 68, 82, 95, 106, 115, 122, 130, 135, 139, 142, 146, 149, 151, 154, 157, 160, 164, 167, 169, 173, 176, 180, 184, 187, 191, 194, 198, 202, 205, 209, 212, 216, 220, 223, 227, 231, 20, 20, 27, 41, 54, 68, 82, 95, 108, 122, 133, 144, 153, 162, 168, 175, 178, 184, 187, 191, 194, 197, 200, 203, 206, 209, 212, 216, 218, 222, 225, 228, 231, 234, 238, 241, 245, 248, 250, 254, 257, 20, 20, 27, 41, 54, 68, 82, 95, 108, 122, 135, 148, 161, 172, 182, 191, 199, 207, 214, 220, 223, 229, 232, 236, 239, 243, 246, 249, 251, 254, 257, 260, 263, 266, 269, 272, 275, 278, 281, 285, 288, 20, 20, 27, 41, 54, 68, 82, 95, 108, 122, 135, 148, 161, 176, 188, 200, 211, 221, 230, 238, 245, 252, 257, 263, 268, 272, 276, 280, 284, 287, 290, 293, 296, 299, 302, 305, 308, 311, 314, 317, 320/), [41, 7]) real, public, parameter :: pi = 4.d0*datan(1.d0)","tags":"","loc":"module/constants_h.html"},{"title":"calc_rtndt – miniFAVOR","text":"Uses assertions_interface material_content_m module~~calc_rtndt~~UsesGraph module~calc_rtndt calc_rtndt assertions_interface assertions_interface module~calc_rtndt->assertions_interface module~material_content_m material_content_m module~calc_rtndt->module~material_content_m data_partition_interface data_partition_interface module~material_content_m->data_partition_interface Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by module~~calc_rtndt~~UsedByGraph module~calc_rtndt calc_rtndt program~minifavor minifavor program~minifavor->module~calc_rtndt proc~whole_shebang whole_shebang proc~whole_shebang->module~calc_rtndt Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Functions cf rtndt Functions public elemental function cf (cu, ni) Arguments Type Intent Optional Attributes Name real, intent(in) :: cu real, intent(in) :: ni Return Value real public elemental function rtndt (a, cf, fsurf, rtndt0, phi) Arguments Type Intent Optional Attributes Name real, intent(in) :: a real, intent(in) :: cf real, intent(in) :: fsurf real, intent(in) :: rtndt0 real, intent(in) :: phi Return Value real","tags":"","loc":"module/calc_rtndt.html"},{"title":"detailed_output_m – miniFAVOR","text":"Uses output_data_m module~~detailed_output_m~~UsesGraph module~detailed_output_m detailed_output_m module~output_data_m output_data_m module~detailed_output_m->module~output_data_m oracle_interface oracle_interface module~output_data_m->oracle_interface module~input_data_m input_data_m module~output_data_m->module~input_data_m module~random_samples_m random_samples_m module~output_data_m->module~random_samples_m object_interface object_interface module~random_samples_m->object_interface Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by Descendants: detailed_output_s module~~detailed_output_m~~UsedByGraph module~detailed_output_m detailed_output_m program~minifavor minifavor program~minifavor->module~detailed_output_m module~detailed_output_s detailed_output_s module~detailed_output_s->module~detailed_output_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces detailed_output_t write_formatted Derived Types detailed_output_t Interfaces public interface detailed_output_t public function new_detailed_output(output_data) Arguments Type Intent Optional Attributes Name type( output_data_t ), intent(in) :: output_data Return Value type( detailed_output_t ) interface private module subroutine write_formatted(self, unit, iotype, v_list, iostat, iomsg) Implementation → Arguments Type Intent Optional Attributes Name class( detailed_output_t ), intent(in) :: self integer, intent(in) :: unit character(len=*), intent(in) :: iotype integer, intent(in) :: v_list (:) integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg Derived Types type, public, extends( output_data_t ) :: detailed_output_t Constructor public  function new_detailed_output (output_data) Type-Bound Procedures procedure, public :: assign generic, public :: assignment(=) => assign procedure, public :: chemistry_content procedure, public :: chemistry_factor procedure, public :: cpi procedure, public :: cpi_avg procedure, public :: k_hist procedure, public :: norm procedure, public :: nsim procedure, public :: ntime procedure, public :: r_tndt procedure, public :: subtract procedure, public :: write_formatted","tags":"","loc":"module/detailed_output_m.html"},{"title":"calc_cpi – miniFAVOR","text":"Used by module~~calc_cpi~~UsedByGraph module~calc_cpi calc_cpi program~minifavor minifavor program~minifavor->module~calc_cpi proc~whole_shebang whole_shebang proc~whole_shebang->module~calc_cpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Functions cpi_t Functions public pure function cpi_t (k, rtndt, t) Arguments Type Intent Optional Attributes Name real, intent(in) :: k real, intent(in) :: rtndt real, intent(in) :: t Return Value real","tags":"","loc":"module/calc_cpi.html"},{"title":"output_data_m – miniFAVOR","text":"Uses input_data_m oracle_interface random_samples_m module~~output_data_m~~UsesGraph module~output_data_m output_data_m oracle_interface oracle_interface module~output_data_m->oracle_interface module~input_data_m input_data_m module~output_data_m->module~input_data_m module~random_samples_m random_samples_m module~output_data_m->module~random_samples_m object_interface object_interface module~random_samples_m->object_interface Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by Descendants: output_data_s module~~output_data_m~~UsedByGraph module~output_data_m output_data_m program~minifavor minifavor program~minifavor->module~output_data_m module~detailed_output_m detailed_output_m program~minifavor->module~detailed_output_m module~output_data_tests output_data_tests module~output_data_tests->module~output_data_m module~detailed_output_m->module~output_data_m module~whole_shebang_tests whole_shebang_tests module~whole_shebang_tests->module~output_data_m module~output_data_s output_data_s module~output_data_s->module~output_data_m module~detailed_output_s detailed_output_s module~detailed_output_s->module~detailed_output_m proc~run~2 run proc~run~2->module~whole_shebang_tests proc~run run proc~run->module~output_data_tests Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces output_data_t assign chemistry_content chemistry_factor cpi cpi_avg k_hist norm nsim ntime r_tndt subtract write_formatted Derived Types output_data_t Interfaces public interface output_data_t public pure function default_constructor() result(new_output_data_t) Arguments None Return Value type( output_data_t ) public pure function new_output_data(input_data, r_tndt, k_hist, chemistry_content, chemistry_factor, cpi, cpi_avg) Arguments Type Intent Optional Attributes Name type( input_data_t ), intent(in) :: input_data real, intent(in) :: r_tndt (:) real, intent(in) :: k_hist (:) real, intent(in) :: chemistry_content (:,:) real, intent(in) :: chemistry_factor (:) real, intent(in) :: cpi (:) real, intent(in) :: cpi_avg (:) Return Value type( output_data_t ) public function whole_shebang(input_data, random_samples) result(new_output_data) Arguments Type Intent Optional Attributes Name type( input_data_t ), intent(in) :: input_data type( random_samples_t ), intent(in) :: random_samples (:) Return Value type( output_data_t ) interface private module subroutine assign(self, rhs) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(inout) :: self class(oracle_t), intent(in) :: rhs interface private module function chemistry_content(self) result(my_chemistry_content) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real,\n  allocatable, (:,:) interface private module function chemistry_factor(self) result(my_chemistry_factor) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real,\n  allocatable, (:) interface private module function cpi(self) result(my_cpi) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real,\n  allocatable, (:) interface private module function cpi_avg(self) result(my_cpi_avg) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real,\n  allocatable, (:) interface private module function k_hist(self) result(my_k_hist) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real,\n  allocatable, (:) interface private pure module function norm(self) result(norm_of_self) Implementation → result is a norm of the array formed by concatenating the real components of self object Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real interface private module function nsim(self) result(my_nsim) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value integer interface private module function ntime(self) result(my_ntime) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value integer interface private module function r_tndt(self) result(my_r_tndt) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real,\n  allocatable, (:) interface private module function subtract(self, rhs) result(difference) Implementation → result has components corresponding to subtracting rhs's components fron self object's components Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self class(oracle_t), intent(in) :: rhs Return Value class(oracle_t),\n  allocatable interface private module subroutine write_formatted(self, unit, iotype, v_list, iostat, iomsg) Implementation → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self integer, intent(in) :: unit character(len=*), intent(in) :: iotype integer, intent(in) :: v_list (:) integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg Derived Types type, public, extends(oracle_t) :: output_data_t Components Type Visibility Attributes Name Initial real, private, allocatable :: chemistry_content_ (:,:) real, private, allocatable :: chemistry_factor_ (:) real, private, allocatable :: cpi_ (:) real, private, allocatable :: cpi_avg_ (:) type( input_data_t ), private :: input_data_ real, private, allocatable :: k_hist_ (:) real, private, allocatable :: r_tndt_ (:) Constructor public pure function default_constructor () public pure function new_output_data (input_data, r_tndt, k_hist, chemistry_content, chemistry_factor, cpi, cpi_avg) public  function whole_shebang (input_data, random_samples) Type-Bound Procedures procedure, public :: assign generic, public :: assignment(=) => assign procedure, public :: chemistry_content procedure, public :: chemistry_factor procedure, public :: cpi procedure, public :: cpi_avg procedure, public :: k_hist procedure, public :: norm procedure, public :: nsim procedure, public :: ntime procedure, public :: r_tndt procedure, public :: subtract procedure, public :: write_formatted","tags":"","loc":"module/output_data_m.html"},{"title":"calc_k – miniFAVOR","text":"Used by module~~calc_k~~UsedByGraph module~calc_k calc_k program~minifavor minifavor program~minifavor->module~calc_k proc~whole_shebang whole_shebang proc~whole_shebang->module~calc_k Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Functions ki_t Functions public elemental function ki_t (a, b, stress) Arguments Type Intent Optional Attributes Name real, intent(in) :: a real, intent(in) :: b real, intent(in) :: stress Return Value real","tags":"","loc":"module/calc_k.html"},{"title":"input_data_m – miniFAVOR","text":"Used by Descendants: input_data_s module~~input_data_m~~UsedByGraph module~input_data_m input_data_m module~input_data_tests input_data_tests module~input_data_tests->module~input_data_m program~minifavor minifavor program~minifavor->module~input_data_m module~output_data_m output_data_m program~minifavor->module~output_data_m module~detailed_output_m detailed_output_m program~minifavor->module~detailed_output_m module~input_data_s input_data_s module~input_data_s->module~input_data_m module~output_data_m->module~input_data_m module~whole_shebang_tests whole_shebang_tests module~whole_shebang_tests->module~input_data_m module~whole_shebang_tests->module~output_data_m module~output_data_tests output_data_tests module~output_data_tests->module~output_data_m proc~run run proc~run->module~input_data_tests proc~run->module~output_data_tests module~detailed_output_m->module~output_data_m proc~run~2 run proc~run~2->module~whole_shebang_tests module~output_data_s output_data_s module~output_data_s->module~output_data_m module~detailed_output_s detailed_output_s module~detailed_output_s->module~detailed_output_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces input_data_t a assign b broadcast cu_ave cu_sig define details fsurf ni_ave ni_sig norm nsim ntime rtndt0 stress subtract temp Derived Types input_data_t Interfaces public interface input_data_t public pure function default_input_data_t() result(new_input_data_t) Arguments None Return Value type( input_data_t ) interface private pure module function a(self) result(self_a) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real interface private pure module subroutine assign(lhs, rhs) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(inout) :: lhs type( input_data_t ), intent(in) :: rhs interface private pure module function b(self) result(self_b) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real interface private module subroutine broadcast(self, source_image) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(inout) :: self integer, intent(in) :: source_image interface private pure module function cu_ave(self) result(self_cu_ave) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real interface private pure module function cu_sig(self) result(self_cu_sig) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real interface private module subroutine define(self, fn_in) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(out) :: self character(len=*), intent(in) :: fn_in interface private pure module function details(self) result(self_details) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value logical interface private pure module function fsurf(self) result(self_fsurf) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real interface private pure module function ni_ave(self) result(self_ni_ave) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real interface private pure module function ni_sig(self) result(self_ni_sig) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real interface private pure module function norm(self) result(norm_of_self) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real interface private pure module function nsim(self) result(self_nsim) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value integer interface private pure module function ntime(self) result(self_ntime) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value integer interface private pure module function rtndt0(self) result(self_rtndt0) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real interface private pure module function stress(self) result(self_stress) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real,\n  allocatable, (:) interface private pure module function subtract(self, rhs) result(difference) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self type( input_data_t ), intent(in) :: rhs Return Value type( input_data_t ) interface private pure module function temp(self) result(self_temp) Implementation → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real,\n  allocatable, (:) Derived Types type, public :: input_data_t Components Type Visibility Attributes Name Initial real, private :: a_ real, private :: b_ real, private :: cu_ave_ real, private :: cu_sig_ logical, private :: details_ real, private :: fsurf_ real, private :: ni_ave_ real, private :: ni_sig_ integer, private :: nsim_ integer, private :: ntime_ real, private :: rtndt0_ real, private, allocatable, dimension(:) :: stress_ real, private, allocatable, dimension(:) :: temp_ Constructor public pure function default_input_data_t () Type-Bound Procedures procedure, public :: a procedure, public :: assign generic, public :: assignment(=) => assign procedure, public :: b procedure, public :: broadcast procedure, public :: cu_ave procedure, public :: cu_sig procedure, public :: define procedure, public :: details procedure, public :: fsurf procedure, public :: ni_ave procedure, public :: ni_sig procedure, public :: norm procedure, public :: nsim procedure, public :: ntime generic, public :: operator(-) => subtract procedure, public :: rtndt0 procedure, public :: stress procedure, public :: subtract procedure, public :: temp","tags":"","loc":"module/input_data_m.html"},{"title":"random_samples_m – miniFAVOR","text":"Uses object_interface module~~random_samples_m~~UsesGraph module~random_samples_m random_samples_m object_interface object_interface module~random_samples_m->object_interface Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by Descendants: random_samples_s module~~random_samples_m~~UsedByGraph module~random_samples_m random_samples_m program~minifavor minifavor program~minifavor->module~random_samples_m module~output_data_m output_data_m program~minifavor->module~output_data_m module~detailed_output_m detailed_output_m program~minifavor->module~detailed_output_m module~random_samples_s random_samples_s module~random_samples_s->module~random_samples_m module~output_data_m->module~random_samples_m module~whole_shebang_tests whole_shebang_tests module~whole_shebang_tests->module~random_samples_m module~whole_shebang_tests->module~output_data_m module~random_samples_tests random_samples_tests module~random_samples_tests->module~random_samples_m module~output_data_tests output_data_tests module~output_data_tests->module~output_data_m proc~run run proc~run->module~random_samples_tests proc~run->module~output_data_tests module~detailed_output_m->module~output_data_m proc~run~2 run proc~run~2->module~whole_shebang_tests module~output_data_s output_data_s module~output_data_s->module~output_data_m module~detailed_output_s detailed_output_s module~detailed_output_s->module~detailed_output_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Interfaces cu_local cu_sig_local define ni_local phi write_formatted Derived Types random_samples_t Interfaces interface private pure module function cu_local(self) result(self_cu_local) Implementation → Arguments Type Intent Optional Attributes Name class( random_samples_t ), intent(in) :: self Return Value real interface private pure module function cu_sig_local(self) result(self_cu_sig_local) Implementation → Arguments Type Intent Optional Attributes Name class( random_samples_t ), intent(in) :: self Return Value real interface private module subroutine define(self) Implementation → Arguments Type Intent Optional Attributes Name class( random_samples_t ), intent(out) :: self interface private pure module function ni_local(self) result(self_ni_local) Implementation → Arguments Type Intent Optional Attributes Name class( random_samples_t ), intent(in) :: self Return Value real interface private elemental module function phi(self) result(self_phi) Implementation → Arguments Type Intent Optional Attributes Name class( random_samples_t ), intent(in) :: self Return Value real interface private module subroutine write_formatted(self, unit, iotype, v_list, iostat, iomsg) Implementation → Arguments Type Intent Optional Attributes Name class( random_samples_t ), intent(in) :: self integer, intent(in) :: unit character(len=*), intent(in) :: iotype integer, intent(in) :: v_list (:) integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg Derived Types type, public, extends(object_t) :: random_samples_t Components Type Visibility Attributes Name Initial real, private :: cu_local_ real, private :: cu_sig_local_ real, private :: ni_local_ real, private :: phi_ Type-Bound Procedures procedure, public :: cu_local procedure, public :: cu_sig_local procedure, public :: define procedure, public :: ni_local procedure, public :: phi procedure, public :: write_formatted","tags":"","loc":"module/random_samples_m.html"},{"title":"output_data_tests – miniFAVOR","text":"Uses output_data_m vegetables iso_fortran_env module~~output_data_tests~~UsesGraph module~output_data_tests output_data_tests module~output_data_m output_data_m module~output_data_tests->module~output_data_m iso_fortran_env iso_fortran_env module~output_data_tests->iso_fortran_env vegetables vegetables module~output_data_tests->vegetables oracle_interface oracle_interface module~output_data_m->oracle_interface module~input_data_m input_data_m module~output_data_m->module~input_data_m module~random_samples_m random_samples_m module~output_data_m->module~random_samples_m object_interface object_interface module~random_samples_m->object_interface Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by module~~output_data_tests~~UsedByGraph module~output_data_tests output_data_tests proc~run run proc~run->module~output_data_tests Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Functions check_norm_of_difference test_output_data Functions public function check_norm_of_difference () result(result_) Arguments None Return Value type(result_t) public function test_output_data () result(test_item) Arguments None Return Value type(test_item_t)","tags":"","loc":"module/output_data_tests.html"},{"title":"input_data_tests – miniFAVOR","text":"Uses input_data_m vegetables iso_fortran_env module~~input_data_tests~~UsesGraph module~input_data_tests input_data_tests vegetables vegetables module~input_data_tests->vegetables module~input_data_m input_data_m module~input_data_tests->module~input_data_m iso_fortran_env iso_fortran_env module~input_data_tests->iso_fortran_env Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by module~~input_data_tests~~UsedByGraph module~input_data_tests input_data_tests proc~run run proc~run->module~input_data_tests Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Functions check_norm_of_difference test_input_data Functions public function check_norm_of_difference () result(result_) Arguments None Return Value type(result_t) public function test_input_data () result(test_item) Arguments None Return Value type(test_item_t)","tags":"","loc":"module/input_data_tests.html"},{"title":"random_samples_tests – miniFAVOR","text":"Uses random_samples_m vegetables module~~random_samples_tests~~UsesGraph module~random_samples_tests random_samples_tests vegetables vegetables module~random_samples_tests->vegetables module~random_samples_m random_samples_m module~random_samples_tests->module~random_samples_m object_interface object_interface module~random_samples_m->object_interface Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by module~~random_samples_tests~~UsedByGraph module~random_samples_tests random_samples_tests proc~run run proc~run->module~random_samples_tests Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Functions check_definition test_random_samples Functions public function check_definition () result(result_) Arguments None Return Value type(result_t) public function test_random_samples () result(test_item) Arguments None Return Value type(test_item_t)","tags":"","loc":"module/random_samples_tests.html"},{"title":"whole_shebang_tests – miniFAVOR","text":"Uses input_data_m output_data_m random_samples_m vegetables iso_fortran_env module~~whole_shebang_tests~~UsesGraph module~whole_shebang_tests whole_shebang_tests vegetables vegetables module~whole_shebang_tests->vegetables iso_fortran_env iso_fortran_env module~whole_shebang_tests->iso_fortran_env module~input_data_m input_data_m module~whole_shebang_tests->module~input_data_m module~output_data_m output_data_m module~whole_shebang_tests->module~output_data_m module~random_samples_m random_samples_m module~whole_shebang_tests->module~random_samples_m module~output_data_m->module~input_data_m module~output_data_m->module~random_samples_m oracle_interface oracle_interface module~output_data_m->oracle_interface object_interface object_interface module~random_samples_m->object_interface Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used by module~~whole_shebang_tests~~UsedByGraph module~whole_shebang_tests whole_shebang_tests proc~run~2 run proc~run~2->module~whole_shebang_tests Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Functions check_whole_shebang reference_wrapper test_output_data Functions public function check_whole_shebang () result(result_) Arguments None Return Value type(result_t) public function reference_wrapper (input_data) result(output_data) Arguments Type Intent Optional Attributes Name type( input_data_t ), intent(in) :: input_data Return Value type( output_data_t ) public function test_output_data () result(test_item) Arguments None Return Value type(test_item_t)","tags":"","loc":"module/whole_shebang_tests.html"},{"title":"reference_inputs_h – miniFAVOR","text":"Used by module~~reference_inputs_h~~UsedByGraph module~reference_inputs_h reference_inputs_h proc~reference_minifavor reference_minifavor proc~reference_minifavor->module~reference_inputs_h proc~reference_wrapper reference_wrapper proc~reference_wrapper->module~reference_inputs_h Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables a b cu_ave cu_sig details fsurf ni_ave ni_sig nsim ntime rtndt0 stress temp Variables Type Visibility Attributes Name Initial real, public :: a real, public :: b real, public :: cu_ave real, public :: cu_sig logical, public :: details real, public :: fsurf real, public :: ni_ave real, public :: ni_sig integer, public :: nsim integer, public :: ntime real, public :: rtndt0 real, public, dimension(:), allocatable :: stress real, public, dimension(:), allocatable :: temp","tags":"","loc":"module/reference_inputs_h.html"},{"title":"reference_constants_h – miniFAVOR","text":"Used by module~~reference_constants_h~~UsedByGraph module~reference_constants_h reference_constants_h proc~cf~2 cf proc~cf~2->module~reference_constants_h proc~ki_t~2 ki_t proc~ki_t~2->module~reference_constants_h Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables cf_weld pi Variables Type Visibility Attributes Name Initial real, public, parameter, dimension(0:40,7) :: cf_weld = reshape((/20, 20, 21, 22, 24, 26, 29, 32, 36, 40, 44, 49, 52, 58, 61, 66, 70, 75, 79, 83, 88, 92, 97, 101, 105, 110, 113, 119, 122, 128, 131, 136, 140, 144, 149, 153, 158, 162, 166, 171, 175, 20, 20, 26, 35, 43, 49, 52, 55, 58, 61, 65, 68, 72, 76, 79, 84, 88, 92, 95, 100, 104, 108, 112, 117, 121, 126, 130, 134, 138, 142, 146, 151, 155, 160, 164, 168, 172, 177, 182, 185, 189, 20, 20, 27, 41, 54, 67, 77, 85, 90, 94, 97, 101, 103, 106, 109, 112, 115, 119, 122, 126, 129, 133, 137, 140, 144, 148, 151, 155, 160, 164, 167, 172, 175, 180, 184, 187, 191, 196, 200, 203, 207, 20, 20, 27, 41, 54, 68, 82, 95, 106, 115, 122, 130, 135, 139, 142, 146, 149, 151, 154, 157, 160, 164, 167, 169, 173, 176, 180, 184, 187, 191, 194, 198, 202, 205, 209, 212, 216, 220, 223, 227, 231, 20, 20, 27, 41, 54, 68, 82, 95, 108, 122, 133, 144, 153, 162, 168, 175, 178, 184, 187, 191, 194, 197, 200, 203, 206, 209, 212, 216, 218, 222, 225, 228, 231, 234, 238, 241, 245, 248, 250, 254, 257, 20, 20, 27, 41, 54, 68, 82, 95, 108, 122, 135, 148, 161, 172, 182, 191, 199, 207, 214, 220, 223, 229, 232, 236, 239, 243, 246, 249, 251, 254, 257, 260, 263, 266, 269, 272, 275, 278, 281, 285, 288, 20, 20, 27, 41, 54, 68, 82, 95, 108, 122, 135, 148, 161, 176, 188, 200, 211, 221, 230, 238, 245, 252, 257, 263, 268, 272, 276, 280, 284, 287, 290, 293, 296, 299, 302, 305, 308, 311, 314, 317, 320/), (/41, 7/)) real, public, parameter :: pi = 4.d0*datan(1.d0)","tags":"","loc":"module/reference_constants_h.html"},{"title":"reference_outputs_h – miniFAVOR","text":"Used by module~~reference_outputs_h~~UsedByGraph module~reference_outputs_h reference_outputs_h proc~reference_minifavor reference_minifavor proc~reference_minifavor->module~reference_outputs_h proc~reference_wrapper reference_wrapper proc~reference_wrapper->module~reference_outputs_h Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables chemistry cpi_hist cpi_results k_hist Variables Type Visibility Attributes Name Initial real, public, dimension(:,:), allocatable :: chemistry real, public, dimension(:,:), allocatable :: cpi_hist real, public, dimension(:,:), allocatable :: cpi_results real, public, dimension(:), allocatable :: k_hist","tags":"","loc":"module/reference_outputs_h.html"},{"title":"reference_calc_rtndt – miniFAVOR","text":"Used by module~~reference_calc_rtndt~~UsedByGraph module~reference_calc_rtndt reference_calc_rtndt proc~reference_minifavor reference_minifavor proc~reference_minifavor->module~reference_calc_rtndt Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Functions cf rtndt Subroutines sample_chem Functions public function cf (cu, ni) Arguments Type Intent Optional Attributes Name real, intent(in) :: cu real, intent(in) :: ni Return Value real public function rtndt (a, cf, fsurf, rtndt0) Arguments Type Intent Optional Attributes Name real, intent(in) :: a real, intent(in) :: cf real, intent(in) :: fsurf real, intent(in) :: rtndt0 Return Value real Subroutines public subroutine sample_chem (cu_ave, ni_ave, cu_sig, ni_sig, cu_local, ni_local) Arguments Type Intent Optional Attributes Name real, intent(in) :: cu_ave real, intent(in) :: ni_ave real, intent(in) :: cu_sig real, intent(in) :: ni_sig real, intent(out) :: cu_local real, intent(out) :: ni_local","tags":"","loc":"module/reference_calc_rtndt.html"},{"title":"reference_calc_cpi – miniFAVOR","text":"Used by module~~reference_calc_cpi~~UsedByGraph module~reference_calc_cpi reference_calc_cpi proc~reference_minifavor reference_minifavor proc~reference_minifavor->module~reference_calc_cpi Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Functions cpi_t Functions public function cpi_t (k, rtndt, t) Arguments Type Intent Optional Attributes Name real, intent(in) :: k real, intent(in) :: rtndt real, intent(in) :: t Return Value real","tags":"","loc":"module/reference_calc_cpi.html"},{"title":"reference_calc_k – miniFAVOR","text":"Used by module~~reference_calc_k~~UsedByGraph module~reference_calc_k reference_calc_k proc~reference_minifavor reference_minifavor proc~reference_minifavor->module~reference_calc_k Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Functions ki_t Functions public function ki_t (a, b, stress) Arguments Type Intent Optional Attributes Name real, intent(in) :: a real, intent(in) :: b real, intent(in) :: stress Return Value real","tags":"","loc":"module/reference_calc_k.html"},{"title":"reference_minifavor_m – miniFAVOR","text":"Used by module~~reference_minifavor_m~~UsedByGraph module~reference_minifavor_m reference_minifavor_m proc~reference_wrapper reference_wrapper proc~reference_wrapper->module~reference_minifavor_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Subroutines reference_minifavor Subroutines public subroutine reference_minifavor () Arguments None","tags":"","loc":"module/reference_minifavor_m.html"},{"title":"random_samples_s – miniFAVOR","text":"Uses assertions_interface Ancestors: random_samples_m module~~random_samples_s~~UsesGraph module~random_samples_s random_samples_s assertions_interface assertions_interface module~random_samples_s->assertions_interface module~random_samples_m random_samples_m module~random_samples_s->module~random_samples_m object_interface object_interface module~random_samples_m->object_interface Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures cu_local cu_sig_local define ni_local phi write_formatted Module Procedures module procedure cu_local pure module function cu_local(self) result(self_cu_local) Interface → Arguments Type Intent Optional Attributes Name class( random_samples_t ), intent(in) :: self Return Value real module procedure cu_sig_local pure module function cu_sig_local(self) result(self_cu_sig_local) Interface → Arguments Type Intent Optional Attributes Name class( random_samples_t ), intent(in) :: self Return Value real module procedure define module subroutine define(self) Interface → Arguments Type Intent Optional Attributes Name class( random_samples_t ), intent(out) :: self module procedure ni_local pure module function ni_local(self) result(self_ni_local) Interface → Arguments Type Intent Optional Attributes Name class( random_samples_t ), intent(in) :: self Return Value real module procedure phi elemental module function phi(self) result(self_phi) Interface → Arguments Type Intent Optional Attributes Name class( random_samples_t ), intent(in) :: self Return Value real module procedure write_formatted module subroutine write_formatted(self, unit, iotype, v_list, iostat, iomsg) Interface → Arguments Type Intent Optional Attributes Name class( random_samples_t ), intent(in) :: self integer, intent(in) :: unit character(len=*), intent(in) :: iotype integer, intent(in) :: v_list (:) integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg","tags":"","loc":"module/random_samples_s.html"},{"title":"input_data_s – miniFAVOR","text":"Uses Ancestors: input_data_m module~~input_data_s~~UsesGraph module~input_data_s input_data_s module~input_data_m input_data_m module~input_data_s->module~input_data_m Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Subroutines broadcast_components Module Procedures a assign b broadcast cu_ave cu_sig default_input_data_t define details fsurf ni_ave ni_sig norm nsim ntime rtndt0 stress subtract temp Subroutines subroutine broadcast_components () Arguments None Module Procedures module procedure a pure module function a(self) result(self_a) Interface → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real module procedure assign pure module subroutine assign(lhs, rhs) Interface → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(inout) :: lhs type( input_data_t ), intent(in) :: rhs module procedure b pure module function b(self) result(self_b) Interface → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real module procedure broadcast module subroutine broadcast(self, source_image) Interface → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(inout) :: self integer, intent(in) :: source_image module procedure cu_ave pure module function cu_ave(self) result(self_cu_ave) Interface → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real module procedure cu_sig pure module function cu_sig(self) result(self_cu_sig) Interface → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real module procedure default_input_data_t module procedure default_input_data_t() Arguments None module procedure define module subroutine define(self, fn_in) Interface → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(out) :: self character(len=*), intent(in) :: fn_in module procedure details pure module function details(self) result(self_details) Interface → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value logical module procedure fsurf pure module function fsurf(self) result(self_fsurf) Interface → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real module procedure ni_ave pure module function ni_ave(self) result(self_ni_ave) Interface → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real module procedure ni_sig pure module function ni_sig(self) result(self_ni_sig) Interface → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real module procedure norm pure module function norm(self) result(norm_of_self) Interface → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real module procedure nsim pure module function nsim(self) result(self_nsim) Interface → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value integer module procedure ntime pure module function ntime(self) result(self_ntime) Interface → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value integer module procedure rtndt0 pure module function rtndt0(self) result(self_rtndt0) Interface → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real module procedure stress pure module function stress(self) result(self_stress) Interface → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real,\n  allocatable, (:) module procedure subtract pure module function subtract(self, rhs) result(difference) Interface → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self type( input_data_t ), intent(in) :: rhs Return Value type( input_data_t ) module procedure temp pure module function temp(self) result(self_temp) Interface → Arguments Type Intent Optional Attributes Name class( input_data_t ), intent(in) :: self Return Value real,\n  allocatable, (:)","tags":"","loc":"module/input_data_s.html"},{"title":"material_content_s – miniFAVOR","text":"Uses assertions_interface Ancestors: material_content_m module~~material_content_s~~UsesGraph module~material_content_s material_content_s assertions_interface assertions_interface module~material_content_s->assertions_interface module~material_content_m material_content_m module~material_content_s->module~material_content_m data_partition_interface data_partition_interface module~material_content_m->data_partition_interface Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures cu gather ni sample_chem write_formatted Module Procedures module procedure cu elemental module function cu(self) result(my_cu) Interface → Arguments Type Intent Optional Attributes Name class( material_content_t ), intent(in) :: self Return Value real module procedure gather module subroutine gather(material_content, data_partition, dim) Interface → Arguments Type Intent Optional Attributes Name type( material_content_t ), intent(inout) :: material_content (:) type(data_partition_t), intent(in) :: data_partition integer, optional :: dim module procedure ni elemental module function ni(self) result(my_ni) Interface → Arguments Type Intent Optional Attributes Name class( material_content_t ), intent(in) :: self Return Value real module procedure sample_chem module procedure sample_chem() Arguments None module procedure write_formatted module subroutine write_formatted(self, unit, iotype, v_list, iostat, iomsg) Interface → Arguments Type Intent Optional Attributes Name class( material_content_t ), intent(in) :: self integer, intent(in) :: unit character(len=*), intent(in) :: iotype integer, intent(in) :: v_list (:) integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg","tags":"","loc":"module/material_content_s.html"},{"title":"detailed_output_s – miniFAVOR","text":"Uses Ancestors: detailed_output_m module~~detailed_output_s~~UsesGraph module~detailed_output_s detailed_output_s module~detailed_output_m detailed_output_m module~detailed_output_s->module~detailed_output_m module~output_data_m output_data_m module~detailed_output_m->module~output_data_m oracle_interface oracle_interface module~output_data_m->oracle_interface module~input_data_m input_data_m module~output_data_m->module~input_data_m module~random_samples_m random_samples_m module~output_data_m->module~random_samples_m object_interface object_interface module~random_samples_m->object_interface Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures new_detailed_output write_formatted Module Procedures module procedure new_detailed_output module procedure new_detailed_output() Arguments None module procedure write_formatted module subroutine write_formatted(self, unit, iotype, v_list, iostat, iomsg) Interface → Arguments Type Intent Optional Attributes Name class( detailed_output_t ), intent(in) :: self integer, intent(in) :: unit character(len=*), intent(in) :: iotype integer, intent(in) :: v_list (:) integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg","tags":"","loc":"module/detailed_output_s.html"},{"title":"output_data_s – miniFAVOR","text":"Uses assertions_interface Ancestors: output_data_m module~~output_data_s~~UsesGraph module~output_data_s output_data_s assertions_interface assertions_interface module~output_data_s->assertions_interface module~output_data_m output_data_m module~output_data_s->module~output_data_m oracle_interface oracle_interface module~output_data_m->oracle_interface module~input_data_m input_data_m module~output_data_m->module~input_data_m module~random_samples_m random_samples_m module~output_data_m->module~random_samples_m object_interface object_interface module~random_samples_m->object_interface Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures assign chemistry_content chemistry_factor cpi cpi_avg default_constructor k_hist new_output_data norm nsim ntime r_tndt subtract whole_shebang write_formatted Module Procedures module procedure assign module subroutine assign(self, rhs) Interface → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(inout) :: self class(oracle_t), intent(in) :: rhs module procedure chemistry_content module function chemistry_content(self) result(my_chemistry_content) Interface → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real,\n  allocatable, (:,:) module procedure chemistry_factor module function chemistry_factor(self) result(my_chemistry_factor) Interface → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real,\n  allocatable, (:) module procedure cpi module function cpi(self) result(my_cpi) Interface → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real,\n  allocatable, (:) module procedure cpi_avg module function cpi_avg(self) result(my_cpi_avg) Interface → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real,\n  allocatable, (:) module procedure default_constructor module procedure default_constructor() Arguments None module procedure k_hist module function k_hist(self) result(my_k_hist) Interface → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real,\n  allocatable, (:) module procedure new_output_data module procedure new_output_data() Arguments None module procedure norm pure module function norm(self) result(norm_of_self) Interface → compute L-infinity norm Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real module procedure nsim module function nsim(self) result(my_nsim) Interface → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value integer module procedure ntime module function ntime(self) result(my_ntime) Interface → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value integer module procedure r_tndt module function r_tndt(self) result(my_r_tndt) Interface → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self Return Value real,\n  allocatable, (:) module procedure subtract module function subtract(self, rhs) result(difference) Interface → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self class(oracle_t), intent(in) :: rhs Return Value class(oracle_t),\n  allocatable module procedure whole_shebang module procedure whole_shebang() Arguments None module procedure write_formatted module subroutine write_formatted(self, unit, iotype, v_list, iostat, iomsg) Interface → Arguments Type Intent Optional Attributes Name class( output_data_t ), intent(in) :: self integer, intent(in) :: unit character(len=*), intent(in) :: iotype integer, intent(in) :: v_list (:) integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg","tags":"","loc":"module/output_data_s.html"},{"title":"minifavor – miniFAVOR","text":"Uses assertions_interface calc_rtndt calc_k calc_cpi random_samples_m input_data_m output_data_m detailed_output_m iso_fortran_env program~~minifavor~~UsesGraph program~minifavor minifavor assertions_interface assertions_interface program~minifavor->assertions_interface iso_fortran_env iso_fortran_env program~minifavor->iso_fortran_env module~input_data_m input_data_m program~minifavor->module~input_data_m module~calc_rtndt calc_rtndt program~minifavor->module~calc_rtndt module~output_data_m output_data_m program~minifavor->module~output_data_m module~calc_k calc_k program~minifavor->module~calc_k module~detailed_output_m detailed_output_m program~minifavor->module~detailed_output_m module~random_samples_m random_samples_m program~minifavor->module~random_samples_m module~calc_cpi calc_cpi program~minifavor->module~calc_cpi module~calc_rtndt->assertions_interface module~material_content_m material_content_m module~calc_rtndt->module~material_content_m module~output_data_m->module~input_data_m module~output_data_m->module~random_samples_m oracle_interface oracle_interface module~output_data_m->oracle_interface module~detailed_output_m->module~output_data_m object_interface object_interface module~random_samples_m->object_interface data_partition_interface data_partition_interface module~material_content_m->data_partition_interface Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Calls program~~minifavor~~CallsGraph program~minifavor minifavor assert assert program~minifavor->assert Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables fn_in i input_data input_unit_reader output_writer samples Source Code minifavor Variables Type Attributes Name Initial character(len=64) :: fn_in integer :: i type( input_data_t ) :: input_data integer, parameter :: input_unit_reader = 1 integer, parameter :: output_writer = 1 type( random_samples_t ), allocatable :: samples (:) Source Code program miniFAVOR use assertions_interface , only : assert use calc_RTndt , only : RTndt , CF use calc_K , only : Ki_t use calc_cpi , only : cpi_t use random_samples_m , only : random_samples_t use input_data_m , only : input_data_t use output_data_m , only : output_data_t use detailed_output_m , only : detailed_output_t use iso_fortran_env , only : input_unit implicit none ! Variables character ( len = 64 ) :: fn_IN integer , parameter :: input_unit_reader = 1 , output_writer = 1 integer :: i type ( random_samples_t ), allocatable :: samples (:) type ( input_data_t ) input_data ! Body of miniFAVOR associate ( me => this_image ()) !Get input file name if ( me == input_unit_reader ) then print * , 'Input file name:' read ( input_unit , '(a)' ) fn_IN !Read input file call input_data % define ( fn_IN ) end if call input_data % broadcast ( source_image = input_unit_reader ) !Calculate applied stress intensity factor (SIF) associate ( nsim => input_data % nsim ()) call assert ( nsim > 0 , \"main: nsim>0\" , nsim ) allocate ( samples ( nsim )) do i = 1 , nsim ! This cannot be parallelized or reordered without the results changing call samples ( i )% define () end do associate ( & output_data => output_data_t ( input_data , samples ), & base_name => fn_IN ( 1 : index ( fn_IN , '.in' ) - 1 ) & ) if ( me == output_writer ) then block integer unit open ( newunit = unit , file = base_name // \".out\" , status = 'unknown' ) write ( unit , '(DT)' ) output_data close ( unit ) if ( input_data % details ()) then open ( newunit = unit , file = base_name // \".dat\" , status = 'unknown' ) write ( unit , '(DT)' ) detailed_output_t ( output_data ) close ( unit ) end if end block end if end associate end associate end associate end program miniFAVOR","tags":"","loc":"program/minifavor.html"},{"title":"main – miniFAVOR","text":"Calls program~~main~~CallsGraph program~main main proc~run run program~main->proc~run random_samples_tests_test_random_samples random_samples_tests_test_random_samples proc~run->random_samples_tests_test_random_samples input_data_tests_test_input_data input_data_tests_test_input_data proc~run->input_data_tests_test_input_data test_that test_that proc~run->test_that output_data_tests_test_output_data output_data_tests_test_output_data proc~run->output_data_tests_test_output_data run_tests run_tests proc~run->run_tests Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Subroutines run Subroutines subroutine run () Arguments None","tags":"","loc":"program/main.html"},{"title":"main – miniFAVOR","text":"Calls program~~main~2~~CallsGraph program~main~2 main proc~run~2 run program~main~2->proc~run~2 whole_shebang_tests_test_output_data whole_shebang_tests_test_output_data proc~run~2->whole_shebang_tests_test_output_data test_that test_that proc~run~2->test_that run_tests run_tests proc~run~2->run_tests Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Subroutines run Subroutines subroutine run () Arguments None","tags":"","loc":"program/main~2.html"}]}